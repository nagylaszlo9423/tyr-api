{"version":3,"sources":["webpack://tyr-map/webpack/universalModuleDefinition","webpack://tyr-map/webpack/bootstrap","webpack://tyr-map/external \"axios\"","webpack://tyr-map/./src/index.ts","webpack://tyr-map/./src/axios/api.ts","webpack://tyr-map/external \"url\"","webpack://tyr-map/./src/axios/base.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","AxiosApi","axiosApi","CreateGroupRequestJoinPolicyEnum","GroupResponseJoinPolicyEnum","UpdateGroupRequestJoinPolicyEnum","DefaultApiAxiosParamCreator","configuration","postOauthLogoutAll","logoutRequest","options","baseOptions","localVarUrlObj","globalImportUrl","parse","localVarRequestOptions","method","localVarHeaderParameter","query","search","headers","needsSerialization","data","JSON","stringify","undefined","url","format","DefaultApiFp","localVarAxiosArgs","axios","basePath","BASE_PATH","axiosRequestArgs","request","DefaultApiFactory","this","BaseAPI","DefaultApi","GroupApiAxiosParamCreator","createGroup","createGroupRequest","findById","groupId","RequiredError","localVarPath","replace","encodeURIComponent","String","getGroupsPaged","page","size","localVarQueryParameter","groupGroupIdDelete","joinGroup","leaveGroup","updateGroup","updateGroupRequest","GroupApiFp","GroupApiFactory","GroupApi","OauthApiAxiosParamCreator","authorize","responseType","clientId","redirectUri","login","loginRequest","logout","authorization","register","registrationRequest","token","grantType","code","refreshToken","OauthApiFp","OauthApiFactory","OauthApi","RouteApiAxiosParamCreator","createRoute","createRouteRequest","deleteRouteById","id","getMostPopularRoutes","getRouteById","shareInGroup","routeId","updateRouteById","updateRouteRequest","RouteApiFp","RouteApiFactory","RouteApi","COLLECTION_FORMATS","csv","ssv","tsv","pipes","field","msg","Error"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,UAAW,GAAIH,GACI,iBAAZC,QACdA,QAAQ,WAAaD,IAErBD,EAAK,WAAaC,IARpB,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,gBClFrDtC,EAAOD,QAAUwC,QAAQ,U,8ECAzB,WACa,EAAAC,SAAWC,G,koBCaxB,WAEA,OAGA,QA+DA,SAAYC,GACR,2BACA,oBACA,kBAHJ,CAAY,EAAAA,mCAAA,EAAAA,iCAAgC,KAyI5C,SAAYC,GACR,2BACA,oBACA,kBAHJ,CAAY,EAAAA,8BAAA,EAAAA,4BAA2B,KA4QvC,SAAYC,GACR,2BACA,oBACA,kBAHJ,CAAY,EAAAA,mCAAA,EAAAA,iCAAgC,KAoC/B,EAAAC,4BAA8B,SAAUC,GACjD,MAAO,CAOHC,mBAAA,SAAmBC,EAA+BC,QAAA,IAAAA,MAAA,IAC9C,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,qBACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAC9DO,EAA0B,GAKhCA,EAAwB,gBAAkB,mBAE1CL,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OANX,IAMgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAAOH,GAA4BP,EAAQU,SACzE,IAAMC,EAA+C,iBAAlBZ,GAAkF,qBAAnDM,EAAuBK,QAAQ,gBAGjG,OAFAL,EAAuBO,KAAQD,EAAqBE,KAAKC,eAA4BC,IAAlBhB,EAA8BA,EAAgB,IAAOA,GAAiB,GAElI,CACHiB,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,MAUZ,EAAAa,aAAe,SAASrB,GACjC,MAAO,CAOHC,mBAAA,SAAmBC,EAA+BC,GAC9C,IAAMmB,EAAoB,EAAAvB,4BAA4BC,GAAeC,mBAAmBC,EAAeC,GACvG,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,OAUxB,EAAAE,kBAAoB,SAAU5B,EAA+BwB,EAAmBD,GACzF,MAAO,CAOHtB,mBAAA,SAAmBC,EAA+BC,GAC9C,OAAO,EAAAkB,aAAarB,GAAeC,mBAAmBC,EAAeC,EAA9D,CAAuEoB,EAAOC,MAWjG,+B,+CAYA,OAZgC,OAQrB,YAAAvB,mBAAP,SAA0BC,EAA+BC,GACrD,OAAO,EAAAkB,aAAaQ,KAAK7B,eAAeC,mBAAmBC,EAAeC,EAAnE,CAA4E0B,KAAKN,MAAOM,KAAKL,WAG5G,EAZA,CAAgC,EAAAM,SAAnB,EAAAC,aAmBA,EAAAC,0BAA4B,SAAUhC,GAC/C,MAAO,CAQHiC,YAAA,SAAYC,EAAyC/B,QAAA,IAAAA,MAAA,IACjD,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,UACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAC9DO,EAA0B,GAKhCA,EAAwB,gBAAkB,mBAE1CL,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OANX,IAMgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAAOH,GAA4BP,EAAQU,SACzE,IAAMC,EAAoD,iBAAvBoB,GAAuF,qBAAnD1B,EAAuBK,QAAQ,gBAGtG,OAFAL,EAAuBO,KAAQD,EAAqBE,KAAKC,eAAiCC,IAAvBgB,EAAmCA,EAAqB,IAAOA,GAAsB,GAEjJ,CACHf,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAUjB2B,SAAA,SAASC,EAAiBjC,GAEtB,QAFsB,IAAAA,MAAA,IAElBiC,QACA,MAAM,IAAI,EAAAC,cAAc,UAAU,2EAEtC,IAGIjC,EAHEkC,EAAe,mBAChBC,QAAQ,YAAkBC,mBAAmBC,OAAOL,KACnD/B,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,OAAUL,GAAgBD,GAWnE,OALAE,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAJX,IAIgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KARE,IAQiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAWjBkC,eAAA,SAAeC,EAAeC,EAAezC,QAAA,IAAAA,MAAA,IACzC,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,eACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,OAAUL,GAAgBD,GAE7D0C,EAAyB,GAiB/B,YAfa3B,IAATyB,IACAE,EAA6B,KAAIF,QAGxBzB,IAAT0B,IACAC,EAA6B,KAAID,GAKrCvC,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAAUkC,GAA2B1C,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAhBE,IAgBiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IASjBsC,mBAAA,SAAmBV,EAAiBjC,GAEhC,QAFgC,IAAAA,MAAA,IAE5BiC,QACA,MAAM,IAAI,EAAAC,cAAc,UAAU,qFAEtC,IAGIjC,EAHEkC,EAAe,mBAChBC,QAAQ,YAAkBC,mBAAmBC,OAAOL,KACnD/B,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,UAAaL,GAAgBD,GAWtE,OALAE,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAJX,IAIgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KARE,IAQiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAUjBuC,UAAA,SAAUX,EAAiBjC,GAEvB,QAFuB,IAAAA,MAAA,IAEnBiC,QACA,MAAM,IAAI,EAAAC,cAAc,UAAU,4EAEtC,IAGIjC,EAHEkC,EAAe,wBAChBC,QAAQ,YAAkBC,mBAAmBC,OAAOL,KACnD/B,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAWpE,OALAE,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAJX,IAIgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KARE,IAQiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAUjBwC,WAAA,SAAWZ,EAAiBjC,GAExB,QAFwB,IAAAA,MAAA,IAEpBiC,QACA,MAAM,IAAI,EAAAC,cAAc,UAAU,6EAEtC,IAGIjC,EAHEkC,EAAe,yBAChBC,QAAQ,YAAkBC,mBAAmBC,OAAOL,KACnD/B,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAWpE,OALAE,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAJX,IAIgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KARE,IAQiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAWjByC,YAAA,SAAYb,EAAiBc,EAAyC/C,GAElE,QAFkE,IAAAA,MAAA,IAE9DiC,QACA,MAAM,IAAI,EAAAC,cAAc,UAAU,8EAEtC,IAGIjC,EAHEkC,EAAe,mBAChBC,QAAQ,YAAkBC,mBAAmBC,OAAOL,KACnD/B,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,OAAUL,GAAgBD,GAC7DO,EAA0B,GAKhCA,EAAwB,gBAAkB,mBAE1CL,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OANX,IAMgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAAOH,GAA4BP,EAAQU,SACzE,IAAMC,EAAoD,iBAAvBoC,GAAuF,qBAAnD1C,EAAuBK,QAAQ,gBAGtG,OAFAL,EAAuBO,KAAQD,EAAqBE,KAAKC,eAAiCC,IAAvBgC,EAAmCA,EAAqB,IAAOA,GAAsB,GAEjJ,CACH/B,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,MAUZ,EAAA2C,WAAa,SAASnD,GAC/B,MAAO,CAQHiC,YAAA,SAAYC,EAAyC/B,GACjD,IAAMmB,EAAoB,EAAAU,0BAA0BhC,GAAeiC,YAAYC,EAAoB/B,GACnG,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAU7BS,SAAA,SAASC,EAAiBjC,GACtB,IAAMmB,EAAoB,EAAAU,0BAA0BhC,GAAemC,SAASC,EAASjC,GACrF,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAW7BgB,eAAA,SAAeC,EAAeC,EAAezC,GACzC,IAAMmB,EAAoB,EAAAU,0BAA0BhC,GAAe0C,eAAeC,EAAMC,EAAMzC,GAC9F,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAS7BoB,mBAAA,SAAmBV,EAAiBjC,GAChC,IAAMmB,EAAoB,EAAAU,0BAA0BhC,GAAe8C,mBAAmBV,EAASjC,GAC/F,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAU7BqB,UAAA,SAAUX,EAAiBjC,GACvB,IAAMmB,EAAoB,EAAAU,0BAA0BhC,GAAe+C,UAAUX,EAASjC,GACtF,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAU7BsB,WAAA,SAAWZ,EAAiBjC,GACxB,IAAMmB,EAAoB,EAAAU,0BAA0BhC,GAAegD,WAAWZ,EAASjC,GACvF,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAW7BuB,YAAA,SAAYb,EAAiBc,EAAyC/C,GAClE,IAAMmB,EAAoB,EAAAU,0BAA0BhC,GAAeiD,YAAYb,EAASc,EAAoB/C,GAC5G,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,OAUxB,EAAA0B,gBAAkB,SAAUpD,EAA+BwB,EAAmBD,GACvF,MAAO,CAQHU,YAAA,SAAYC,EAAyC/B,GACjD,OAAO,EAAAgD,WAAWnD,GAAeiC,YAAYC,EAAoB/B,EAA1D,CAAmEoB,EAAOC,IASrFW,SAAA,SAASC,EAAiBjC,GACtB,OAAO,EAAAgD,WAAWnD,GAAemC,SAASC,EAASjC,EAA5C,CAAqDoB,EAAOC,IAUvEkB,eAAA,SAAeC,EAAeC,EAAezC,GACzC,OAAO,EAAAgD,WAAWnD,GAAe0C,eAAeC,EAAMC,EAAMzC,EAArD,CAA8DoB,EAAOC,IAQhFsB,mBAAA,SAAmBV,EAAiBjC,GAChC,OAAO,EAAAgD,WAAWnD,GAAe8C,mBAAmBV,EAASjC,EAAtD,CAA+DoB,EAAOC,IASjFuB,UAAA,SAAUX,EAAiBjC,GACvB,OAAO,EAAAgD,WAAWnD,GAAe+C,UAAUX,EAASjC,EAA7C,CAAsDoB,EAAOC,IASxEwB,WAAA,SAAWZ,EAAiBjC,GACxB,OAAO,EAAAgD,WAAWnD,GAAegD,WAAWZ,EAASjC,EAA9C,CAAuDoB,EAAOC,IAUzEyB,YAAA,SAAYb,EAAiBc,EAAyC/C,GAClE,OAAO,EAAAgD,WAAWnD,GAAeiD,YAAYb,EAASc,EAAoB/C,EAAnE,CAA4EoB,EAAOC,MAWtG,+B,+CAsFA,OAtF8B,OASnB,YAAAS,YAAP,SAAmBC,EAAyC/B,GACxD,OAAO,EAAAgD,WAAWtB,KAAK7B,eAAeiC,YAAYC,EAAoB/B,EAA/D,CAAwE0B,KAAKN,MAAOM,KAAKL,WAW7F,YAAAW,SAAP,SAAgBC,EAAiBjC,GAC7B,OAAO,EAAAgD,WAAWtB,KAAK7B,eAAemC,SAASC,EAASjC,EAAjD,CAA0D0B,KAAKN,MAAOM,KAAKL,WAY/E,YAAAkB,eAAP,SAAsBC,EAAeC,EAAezC,GAChD,OAAO,EAAAgD,WAAWtB,KAAK7B,eAAe0C,eAAeC,EAAMC,EAAMzC,EAA1D,CAAmE0B,KAAKN,MAAOM,KAAKL,WAUxF,YAAAsB,mBAAP,SAA0BV,EAAiBjC,GACvC,OAAO,EAAAgD,WAAWtB,KAAK7B,eAAe8C,mBAAmBV,EAASjC,EAA3D,CAAoE0B,KAAKN,MAAOM,KAAKL,WAWzF,YAAAuB,UAAP,SAAiBX,EAAiBjC,GAC9B,OAAO,EAAAgD,WAAWtB,KAAK7B,eAAe+C,UAAUX,EAASjC,EAAlD,CAA2D0B,KAAKN,MAAOM,KAAKL,WAWhF,YAAAwB,WAAP,SAAkBZ,EAAiBjC,GAC/B,OAAO,EAAAgD,WAAWtB,KAAK7B,eAAegD,WAAWZ,EAASjC,EAAnD,CAA4D0B,KAAKN,MAAOM,KAAKL,WAYjF,YAAAyB,YAAP,SAAmBb,EAAiBc,EAAyC/C,GACzE,OAAO,EAAAgD,WAAWtB,KAAK7B,eAAeiD,YAAYb,EAASc,EAAoB/C,EAAxE,CAAiF0B,KAAKN,MAAOM,KAAKL,WAGjH,EAtFA,CAA8B,EAAAM,SAAjB,EAAAuB,WA6FA,EAAAC,0BAA4B,SAAUtD,GAC/C,MAAO,CASHuD,UAAA,SAAUC,EAAuBC,EAAmBC,EAAsBvD,QAAA,IAAAA,MAAA,IACtE,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,oBACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAE9D0C,EAAyB,GAqB/B,YAnBqB3B,IAAjBsC,IACAX,EAAsC,cAAIW,QAG7BtC,IAAbuC,IACAZ,EAAkC,UAAIY,QAGtBvC,IAAhBwC,IACAb,EAAqC,aAAIa,GAK7CrD,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAAUkC,GAA2B1C,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KApBE,IAoBiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IASjBmD,MAAA,SAAMC,EAA6BzD,QAAA,IAAAA,MAAA,IAC/B,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,gBACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAC9DO,EAA0B,GAKhCA,EAAwB,gBAAkB,mBAE1CL,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OANX,IAMgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAAOH,GAA4BP,EAAQU,SACzE,IAAMC,EAA8C,iBAAjB8C,GAAiF,qBAAnDpD,EAAuBK,QAAQ,gBAGhG,OAFAL,EAAuBO,KAAQD,EAAqBE,KAAKC,eAA2BC,IAAjB0C,EAA6BA,EAAe,IAAOA,GAAgB,GAE/H,CACHzC,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IASjBqD,OAAA,SAAOC,EAAwB3D,QAAA,IAAAA,MAAA,IAC3B,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,iBACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAC9DO,EAA0B,GAchC,OAXIoD,UACApD,EAAuC,cAAI+B,OAAOqB,IAKtDzD,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OARX,IAQgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAAOH,GAA4BP,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IASjBuD,SAAA,SAASC,EAA2C7D,QAAA,IAAAA,MAAA,IAChD,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,mBACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAC9DO,EAA0B,GAKhCA,EAAwB,gBAAkB,mBAE1CL,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OANX,IAMgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAAOH,GAA4BP,EAAQU,SACzE,IAAMC,EAAqD,iBAAxBkD,GAAwF,qBAAnDxD,EAAuBK,QAAQ,gBAGvG,OAFAL,EAAuBO,KAAQD,EAAqBE,KAAKC,eAAkCC,IAAxB8C,EAAoCA,EAAsB,IAAOA,GAAuB,GAEpJ,CACH7C,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAajByD,MAAA,SAAMC,EAAoBC,EAAeT,EAAsBD,EAAmBW,EAAuBjE,QAAA,IAAAA,MAAA,IACrG,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,gBACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAE9D0C,EAAyB,GA6B/B,YA3BkB3B,IAAdgD,IACArB,EAAmC,WAAIqB,QAG9BhD,IAATiD,IACAtB,EAA6B,KAAIsB,QAGjBjD,IAAhBwC,IACAb,EAAqC,aAAIa,QAG5BxC,IAAbuC,IACAZ,EAAkC,UAAIY,QAGrBvC,IAAjBkD,IACAvB,EAAsC,cAAIuB,GAK9C/D,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAAUkC,GAA2B1C,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KA5BE,IA4BiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,MAUZ,EAAA6D,WAAa,SAASrE,GAC/B,MAAO,CASHuD,UAAA,SAAUC,EAAuBC,EAAmBC,EAAsBvD,GACtE,IAAMmB,EAAoB,EAAAgC,0BAA0BtD,GAAeuD,UAAUC,EAAcC,EAAUC,EAAavD,GAClH,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAS7BiC,MAAA,SAAMC,EAA6BzD,GAC/B,IAAMmB,EAAoB,EAAAgC,0BAA0BtD,GAAe2D,MAAMC,EAAczD,GACvF,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAS7BmC,OAAA,SAAOC,EAAwB3D,GAC3B,IAAMmB,EAAoB,EAAAgC,0BAA0BtD,GAAe6D,OAAOC,EAAe3D,GACzF,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAS7BqC,SAAA,SAASC,EAA2C7D,GAChD,IAAMmB,EAAoB,EAAAgC,0BAA0BtD,GAAe+D,SAASC,EAAqB7D,GACjG,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAa7BuC,MAAA,SAAMC,EAAoBC,EAAeT,EAAsBD,EAAmBW,EAAuBjE,GACrG,IAAMmB,EAAoB,EAAAgC,0BAA0BtD,GAAeiE,MAAMC,EAAWC,EAAMT,EAAaD,EAAUW,EAAcjE,GAC/H,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,OAUxB,EAAA4C,gBAAkB,SAAUtE,EAA+BwB,EAAmBD,GACvF,MAAO,CASHgC,UAAA,SAAUC,EAAuBC,EAAmBC,EAAsBvD,GACtE,OAAO,EAAAkE,WAAWrE,GAAeuD,UAAUC,EAAcC,EAAUC,EAAavD,EAAzE,CAAkFoB,EAAOC,IAQpGmC,MAAA,SAAMC,EAA6BzD,GAC/B,OAAO,EAAAkE,WAAWrE,GAAe2D,MAAMC,EAAczD,EAA9C,CAAuDoB,EAAOC,IAQzEqC,OAAA,SAAOC,EAAwB3D,GAC3B,OAAO,EAAAkE,WAAWrE,GAAe6D,OAAOC,EAAe3D,EAAhD,CAAyDoB,EAAOC,IAQ3EuC,SAAA,SAASC,EAA2C7D,GAChD,OAAO,EAAAkE,WAAWrE,GAAe+D,SAASC,EAAqB7D,EAAxD,CAAiEoB,EAAOC,IAYnFyC,MAAA,SAAMC,EAAoBC,EAAeT,EAAsBD,EAAmBW,EAAuBjE,GACrG,OAAO,EAAAkE,WAAWrE,GAAeiE,MAAMC,EAAWC,EAAMT,EAAaD,EAAUW,EAAcjE,EAAtF,CAA+FoB,EAAOC,MAWzH,+B,+CA8DA,OA9D8B,OAUnB,YAAA+B,UAAP,SAAiBC,EAAuBC,EAAmBC,EAAsBvD,GAC7E,OAAO,EAAAkE,WAAWxC,KAAK7B,eAAeuD,UAAUC,EAAcC,EAAUC,EAAavD,EAA9E,CAAuF0B,KAAKN,MAAOM,KAAKL,WAU5G,YAAAmC,MAAP,SAAaC,EAA6BzD,GACtC,OAAO,EAAAkE,WAAWxC,KAAK7B,eAAe2D,MAAMC,EAAczD,EAAnD,CAA4D0B,KAAKN,MAAOM,KAAKL,WAUjF,YAAAqC,OAAP,SAAcC,EAAwB3D,GAClC,OAAO,EAAAkE,WAAWxC,KAAK7B,eAAe6D,OAAOC,EAAe3D,EAArD,CAA8D0B,KAAKN,MAAOM,KAAKL,WAUnF,YAAAuC,SAAP,SAAgBC,EAA2C7D,GACvD,OAAO,EAAAkE,WAAWxC,KAAK7B,eAAe+D,SAASC,EAAqB7D,EAA7D,CAAsE0B,KAAKN,MAAOM,KAAKL,WAc3F,YAAAyC,MAAP,SAAaC,EAAoBC,EAAeT,EAAsBD,EAAmBW,EAAuBjE,GAC5G,OAAO,EAAAkE,WAAWxC,KAAK7B,eAAeiE,MAAMC,EAAWC,EAAMT,EAAaD,EAAUW,EAAcjE,EAA3F,CAAoG0B,KAAKN,MAAOM,KAAKL,WAGpI,EA9DA,CAA8B,EAAAM,SAAjB,EAAAyC,WAqEA,EAAAC,0BAA4B,SAAUxE,GAC/C,MAAO,CAOHyE,YAAA,SAAYC,EAAyCvE,QAAA,IAAAA,MAAA,IACjD,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,UACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAC9DO,EAA0B,GAKhCA,EAAwB,gBAAkB,mBAE1CL,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OANX,IAMgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAAOH,GAA4BP,EAAQU,SACzE,IAAMC,EAAoD,iBAAvB4D,GAAuF,qBAAnDlE,EAAuBK,QAAQ,gBAGtG,OAFAL,EAAuBO,KAAQD,EAAqBE,KAAKC,eAAiCC,IAAvBwD,EAAmCA,EAAqB,IAAOA,GAAsB,GAEjJ,CACHvD,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IASjBmE,gBAAA,SAAgBC,EAAYzE,GAExB,QAFwB,IAAAA,MAAA,IAEpByE,QACA,MAAM,IAAI,EAAAvC,cAAc,KAAK,6EAEjC,IAGIjC,EAHEkC,EAAe,cAChBC,QAAQ,OAAaC,mBAAmBC,OAAOmC,KAC9CvE,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,UAAaL,GAAgBD,GAWtE,OALAE,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAJX,IAIgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KARE,IAQiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IASjBqE,qBAAA,SAAqB1E,QAAA,IAAAA,MAAA,IACjB,IAEIC,EADEC,EAAiBC,EAAgBC,MADlB,uBACsC,GAEvDP,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,OAAUL,GAAgBD,GAWnE,OALAE,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAJX,IAIgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KARE,IAQiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAUjBsE,aAAA,SAAaF,EAAYzE,GAErB,QAFqB,IAAAA,MAAA,IAEjByE,QACA,MAAM,IAAI,EAAAvC,cAAc,KAAK,0EAEjC,IAGIjC,EAHEkC,EAAe,cAChBC,QAAQ,OAAaC,mBAAmBC,OAAOmC,KAC9CvE,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,OAAUL,GAAgBD,GAWnE,OALAE,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAJX,IAIgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KARE,IAQiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAUjBuE,aAAA,SAAaC,EAAiB5C,EAAiBjC,GAE3C,QAF2C,IAAAA,MAAA,IAEvC6E,QACA,MAAM,IAAI,EAAA3C,cAAc,UAAU,+EAGtC,GAAID,QACA,MAAM,IAAI,EAAAC,cAAc,UAAU,+EAEtC,IAIIjC,EAJEkC,EAAe,4CAChBC,QAAQ,YAAkBC,mBAAmBC,OAAOuC,KACpDzC,QAAQ,YAAkBC,mBAAmBC,OAAOL,KACnD/B,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,QAAWL,GAAgBD,GAWpE,OALAE,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OAJX,IAIgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KARE,IAQiCV,EAAQU,SAElE,CACHM,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,IAUjByE,gBAAA,SAAgBL,EAAYM,EAAyC/E,GAEjE,QAFiE,IAAAA,MAAA,IAE7DyE,QACA,MAAM,IAAI,EAAAvC,cAAc,KAAK,6EAEjC,IAGIjC,EAHEkC,EAAe,cAChBC,QAAQ,OAAaC,mBAAmBC,OAAOmC,KAC9CvE,EAAiBC,EAAgBC,MAAM+B,GAAc,GAEvDtC,IACAI,EAAcJ,EAAcI,aAEhC,IAAMI,EAAyB,EAAH,GAAKC,OAAQ,OAAUL,GAAgBD,GAC7DO,EAA0B,GAKhCA,EAAwB,gBAAkB,mBAE1CL,EAAeM,MAAQ,EAAH,OAAON,EAAeM,OANX,IAMgDR,EAAQQ,cAEhFN,EAAeO,OACtBJ,EAAuBK,QAAU,EAAH,KAAOH,GAA4BP,EAAQU,SACzE,IAAMC,EAAoD,iBAAvBoE,GAAuF,qBAAnD1E,EAAuBK,QAAQ,gBAGtG,OAFAL,EAAuBO,KAAQD,EAAqBE,KAAKC,eAAiCC,IAAvBgE,EAAmCA,EAAqB,IAAOA,GAAsB,GAEjJ,CACH/D,IAAKb,EAAgBc,OAAOf,GAC5BF,QAASK,MAUZ,EAAA2E,WAAa,SAASnF,GAC/B,MAAO,CAOHyE,YAAA,SAAYC,EAAyCvE,GACjD,IAAMmB,EAAoB,EAAAkD,0BAA0BxE,GAAeyE,YAAYC,EAAoBvE,GACnG,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAS7BiD,gBAAA,SAAgBC,EAAYzE,GACxB,IAAMmB,EAAoB,EAAAkD,0BAA0BxE,GAAe2E,gBAAgBC,EAAIzE,GACvF,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAS7BmD,qBAAA,SAAqB1E,GACjB,IAAMmB,EAAoB,EAAAkD,0BAA0BxE,GAAe6E,qBAAqB1E,GACxF,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAU7BoD,aAAA,SAAaF,EAAYzE,GACrB,IAAMmB,EAAoB,EAAAkD,0BAA0BxE,GAAe8E,aAAaF,EAAIzE,GACpF,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAU7BqD,aAAA,SAAaC,EAAiB5C,EAAiBjC,GAC3C,IAAMmB,EAAoB,EAAAkD,0BAA0BxE,GAAe+E,aAAaC,EAAS5C,EAASjC,GAClG,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,KAU7BuD,gBAAA,SAAgBL,EAAYM,EAAyC/E,GACjE,IAAMmB,EAAoB,EAAAkD,0BAA0BxE,GAAeiF,gBAAgBL,EAAIM,EAAoB/E,GAC3G,OAAO,SAACoB,EAAoCC,QAApC,IAAAD,MAAuB,gBAAa,IAAAC,MAAmB,EAAAC,WAC3D,IAAMC,EAAmB,EAAH,KAAOJ,EAAkBnB,SAAO,CAAEgB,IAAKK,EAAWF,EAAkBH,MAC1F,OAAOI,EAAMI,QAAQD,OAUxB,EAAA0D,gBAAkB,SAAUpF,EAA+BwB,EAAmBD,GACvF,MAAO,CAOHkD,YAAA,SAAYC,EAAyCvE,GACjD,OAAO,EAAAgF,WAAWnF,GAAeyE,YAAYC,EAAoBvE,EAA1D,CAAmEoB,EAAOC,IAQrFmD,gBAAA,SAAgBC,EAAYzE,GACxB,OAAO,EAAAgF,WAAWnF,GAAe2E,gBAAgBC,EAAIzE,EAA9C,CAAuDoB,EAAOC,IAQzEqD,qBAAA,SAAqB1E,GACjB,OAAO,EAAAgF,WAAWnF,GAAe6E,qBAAqB1E,EAA/C,CAAwDoB,EAAOC,IAS1EsD,aAAA,SAAaF,EAAYzE,GACrB,OAAO,EAAAgF,WAAWnF,GAAe8E,aAAaF,EAAIzE,EAA3C,CAAoDoB,EAAOC,IAStEuD,aAAA,SAAaC,EAAiB5C,EAAiBjC,GAC3C,OAAO,EAAAgF,WAAWnF,GAAe+E,aAAaC,EAAS5C,EAASjC,EAAzD,CAAkEoB,EAAOC,IASpFyD,gBAAA,SAAgBL,EAAYM,EAAyC/E,GACjE,OAAO,EAAAgF,WAAWnF,GAAeiF,gBAAgBL,EAAIM,EAAoB/E,EAAlE,CAA2EoB,EAAOC,MAWrG,+B,+CAsEA,OAtE8B,OAQnB,YAAAiD,YAAP,SAAmBC,EAAyCvE,GACxD,OAAO,EAAAgF,WAAWtD,KAAK7B,eAAeyE,YAAYC,EAAoBvE,EAA/D,CAAwE0B,KAAKN,MAAOM,KAAKL,WAU7F,YAAAmD,gBAAP,SAAuBC,EAAYzE,GAC/B,OAAO,EAAAgF,WAAWtD,KAAK7B,eAAe2E,gBAAgBC,EAAIzE,EAAnD,CAA4D0B,KAAKN,MAAOM,KAAKL,WAUjF,YAAAqD,qBAAP,SAA4B1E,GACxB,OAAO,EAAAgF,WAAWtD,KAAK7B,eAAe6E,qBAAqB1E,EAApD,CAA6D0B,KAAKN,MAAOM,KAAKL,WAWlF,YAAAsD,aAAP,SAAoBF,EAAYzE,GAC5B,OAAO,EAAAgF,WAAWtD,KAAK7B,eAAe8E,aAAaF,EAAIzE,EAAhD,CAAyD0B,KAAKN,MAAOM,KAAKL,WAW9E,YAAAuD,aAAP,SAAoBC,EAAiB5C,EAAiBjC,GAClD,OAAO,EAAAgF,WAAWtD,KAAK7B,eAAe+E,aAAaC,EAAS5C,EAASjC,EAA9D,CAAuE0B,KAAKN,MAAOM,KAAKL,WAW5F,YAAAyD,gBAAP,SAAuBL,EAAYM,EAAyC/E,GACxE,OAAO,EAAAgF,WAAWtD,KAAK7B,eAAeiF,gBAAgBL,EAAIM,EAAoB/E,EAAvE,CAAgF0B,KAAKN,MAAOM,KAAKL,WAGhH,EAtEA,CAA8B,EAAAM,SAAjB,EAAAuD,Y,cC16DbnI,EAAOD,QAAUwC,QAAQ,Q,8ZCiBzB,WAEa,EAAAgC,UAAY,wBAAwBc,QAAQ,OAAQ,IAMpD,EAAA+C,mBAAqB,CAC9BC,IAAK,IACLC,IAAK,IACLC,IAAK,KACLC,MAAO,KAkBX,MAGI,SAAY1F,EAAyCwB,EAAwCD,QAAxC,IAAAC,MAAmB,EAAAC,gBAAqB,IAAAF,MAAuB,WAA/D,KAAAC,WAAwC,KAAAD,QACrFvB,IACA6B,KAAK7B,cAAgBA,EACrB6B,KAAKL,SAAWxB,EAAcwB,UAAYK,KAAKL,WAN9C,EAAAM,UAiBb,kBAEI,WAAmB6D,EAAeC,GAAlC,MACI,YAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAA3H,KAAwB,gB,EAI5B,OALmC,OAKnC,EALA,CAAmC6H,OAAtB,EAAAxD","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tyr-map\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tyr-map\"] = factory();\n\telse\n\t\troot[\"tyr-map\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"axios\");","import * as axiosApi from './axios/api';\r\nexport const AxiosApi = axiosApi;\r\n","// tslint:disable\n/**\n * swagger\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AuditDto\n */\nexport interface AuditDto {\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    createdBy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    createdAt?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    modifiedBy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    modifiedAt?: string;\n}\n/**\n * \n * @export\n * @interface CreateGroupRequest\n */\nexport interface CreateGroupRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateGroupRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateGroupRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateGroupRequest\n     */\n    joinPolicy?: CreateGroupRequestJoinPolicyEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CreateGroupRequestJoinPolicyEnum {\n    INVITEONLY = 'INVITE_ONLY',\n    REQUEST = 'REQUEST',\n    PUBLIC = 'PUBLIC'\n}\n\n/**\n * \n * @export\n * @interface CreateRouteRequest\n */\nexport interface CreateRouteRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRouteRequest\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CreateRouteRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {LineStringDto}\n     * @memberof CreateRouteRequest\n     */\n    path?: LineStringDto;\n}\n/**\n * \n * @export\n * @interface CreatedRespone\n */\nexport interface CreatedRespone {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatedRespone\n     */\n    id: string;\n}\n/**\n * \n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    cause: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    message?: string;\n}\n/**\n * \n * @export\n * @interface GroupPageResponse\n */\nexport interface GroupPageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<GroupResponse>}\n     * @memberof GroupPageResponse\n     */\n    items: Array<GroupResponse>;\n}\n/**\n * \n * @export\n * @interface GroupPageResponseAllOf\n */\nexport interface GroupPageResponseAllOf {\n    /**\n     * \n     * @type {Array<GroupResponse>}\n     * @memberof GroupPageResponseAllOf\n     */\n    items?: Array<GroupResponse>;\n}\n/**\n * \n * @export\n * @interface GroupResponse\n */\nexport interface GroupResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    joinPolicy?: GroupResponseJoinPolicyEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    owner: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum GroupResponseJoinPolicyEnum {\n    INVITEONLY = 'INVITE_ONLY',\n    REQUEST = 'REQUEST',\n    PUBLIC = 'PUBLIC'\n}\n\n/**\n * \n * @export\n * @interface LineStringDto\n */\nexport interface LineStringDto {\n    /**\n     * \n     * @type {string}\n     * @memberof LineStringDto\n     */\n    type: string;\n    /**\n     * \n     * @type {Array<Array<number>>}\n     * @memberof LineStringDto\n     */\n    coordinates: Array<Array<number>>;\n}\n/**\n * \n * @export\n * @interface LoginRequest\n */\nexport interface LoginRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    password?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    clientId?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    redirectUri?: string;\n}\n/**\n * \n * @export\n * @interface LoginResponse\n */\nexport interface LoginResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResponse\n     */\n    code: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResponse\n     */\n    redirectUri: string;\n}\n/**\n * \n * @export\n * @interface LogoutRequest\n */\nexport interface LogoutRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof LogoutRequest\n     */\n    accessToken?: string;\n}\n/**\n * \n * @export\n * @interface PageResponse\n */\nexport interface PageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof PageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<object>}\n     * @memberof PageResponse\n     */\n    items: Array<object>;\n}\n/**\n * \n * @export\n * @interface RegistrationRequest\n */\nexport interface RegistrationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationRequest\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationRequest\n     */\n    password: string;\n}\n/**\n * \n * @export\n * @interface RegistrationResponse\n */\nexport interface RegistrationResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationResponse\n     */\n    userId: string;\n}\n/**\n * \n * @export\n * @interface ResourceItemResponse\n */\nexport interface ResourceItemResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface RouteResponse\n */\nexport interface RouteResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof RouteResponse\n     */\n    title: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RouteResponse\n     */\n    description: string;\n    /**\n     * \n     * @type {LineStringDto}\n     * @memberof RouteResponse\n     */\n    path: LineStringDto;\n    /**\n     * \n     * @type {AuditDto}\n     * @memberof RouteResponse\n     */\n    audit: AuditDto;\n    /**\n     * \n     * @type {Array<ResourceItemResponse>}\n     * @memberof RouteResponse\n     */\n    images: Array<ResourceItemResponse>;\n}\n/**\n * \n * @export\n * @interface TokenResponse\n */\nexport interface TokenResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    accessToken: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    accessTokenExpiration: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    refreshToken: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    refreshTokenExpiration: string;\n}\n/**\n * \n * @export\n * @interface UpdateGroupRequest\n */\nexport interface UpdateGroupRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateGroupRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateGroupRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateGroupRequest\n     */\n    joinPolicy?: UpdateGroupRequestJoinPolicyEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum UpdateGroupRequestJoinPolicyEnum {\n    INVITEONLY = 'INVITE_ONLY',\n    REQUEST = 'REQUEST',\n    PUBLIC = 'PUBLIC'\n}\n\n/**\n * \n * @export\n * @interface UpdateRouteRequest\n */\nexport interface UpdateRouteRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateRouteRequest\n     */\n    title?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof UpdateRouteRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {LineStringDto}\n     * @memberof UpdateRouteRequest\n     */\n    path?: LineStringDto;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(logoutRequest?: LogoutRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/logout/all`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof logoutRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(logoutRequest !== undefined ? logoutRequest : {}) : (logoutRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(logoutRequest?: LogoutRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postOauthLogoutAll(logoutRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(logoutRequest?: LogoutRequest, options?: any) {\n            return DefaultApiFp(configuration).postOauthLogoutAll(logoutRequest, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI {\n    /**\n     * \n     * @param {LogoutRequest} [logoutRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public postOauthLogoutAll(logoutRequest?: LogoutRequest, options?: any) {\n        return DefaultApiFp(this.configuration).postOauthLogoutAll(logoutRequest, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * GroupApi - axios parameter creator\n * @export\n */\nexport const GroupApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary createGroup\n         * @param {CreateGroupRequest} [createGroupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(createGroupRequest?: CreateGroupRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/group`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof createGroupRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createGroupRequest !== undefined ? createGroupRequest : {}) : (createGroupRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling findById.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, options: any = {}): RequestArgs {\n            const localVarPath = `/group/page`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdDelete.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling joinGroup.');\n            }\n            const localVarPath = `/group/{groupId}/join`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling leaveGroup.');\n            }\n            const localVarPath = `/group/{groupId}/leave`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {UpdateGroupRequest} [updateGroupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, updateGroupRequest?: UpdateGroupRequest, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling updateGroup.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof updateGroupRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateGroupRequest !== undefined ? updateGroupRequest : {}) : (updateGroupRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * GroupApi - functional programming interface\n * @export\n */\nexport const GroupApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary createGroup\n         * @param {CreateGroupRequest} [createGroupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(createGroupRequest?: CreateGroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).createGroup(createGroupRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).findById(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPageResponse> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).getGroupsPaged(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).groupGroupIdDelete(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).joinGroup(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).leaveGroup(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {UpdateGroupRequest} [updateGroupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).updateGroup(groupId, updateGroupRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * GroupApi - factory interface\n * @export\n */\nexport const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary createGroup\n         * @param {CreateGroupRequest} [createGroupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(createGroupRequest?: CreateGroupRequest, options?: any) {\n            return GroupApiFp(configuration).createGroup(createGroupRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options?: any) {\n            return GroupApiFp(configuration).findById(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, options?: any) {\n            return GroupApiFp(configuration).getGroupsPaged(page, size, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options?: any) {\n            return GroupApiFp(configuration).groupGroupIdDelete(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options?: any) {\n            return GroupApiFp(configuration).joinGroup(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options?: any) {\n            return GroupApiFp(configuration).leaveGroup(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {UpdateGroupRequest} [updateGroupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: any) {\n            return GroupApiFp(configuration).updateGroup(groupId, updateGroupRequest, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * GroupApi - object-oriented interface\n * @export\n * @class GroupApi\n * @extends {BaseAPI}\n */\nexport class GroupApi extends BaseAPI {\n    /**\n     * \n     * @summary createGroup\n     * @param {CreateGroupRequest} [createGroupRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public createGroup(createGroupRequest?: CreateGroupRequest, options?: any) {\n        return GroupApiFp(this.configuration).createGroup(createGroupRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary findById\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public findById(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).findById(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary getGroupsPaged\n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public getGroupsPaged(page?: number, size?: number, options?: any) {\n        return GroupApiFp(this.configuration).getGroupsPaged(page, size, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public groupGroupIdDelete(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).groupGroupIdDelete(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary joinGroup\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public joinGroup(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).joinGroup(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary leaveGroup\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public leaveGroup(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).leaveGroup(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary updateGroup\n     * @param {string} groupId \n     * @param {UpdateGroupRequest} [updateGroupRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public updateGroup(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: any) {\n        return GroupApiFp(this.configuration).updateGroup(groupId, updateGroupRequest, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * OauthApi - axios parameter creator\n * @export\n */\nexport const OauthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/authorize`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (responseType !== undefined) {\n                localVarQueryParameter['response_type'] = responseType;\n            }\n\n            if (clientId !== undefined) {\n                localVarQueryParameter['client_id'] = clientId;\n            }\n\n            if (redirectUri !== undefined) {\n                localVarQueryParameter['redirect_uri'] = redirectUri;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/login`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof loginRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/logout`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (authorization !== undefined && authorization !== null) {\n                localVarHeaderParameter['Authorization'] = String(authorization);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/register`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof registrationRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registrationRequest !== undefined ? registrationRequest : {}) : (registrationRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/token`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (grantType !== undefined) {\n                localVarQueryParameter['grant_type'] = grantType;\n            }\n\n            if (code !== undefined) {\n                localVarQueryParameter['code'] = code;\n            }\n\n            if (redirectUri !== undefined) {\n                localVarQueryParameter['redirect_uri'] = redirectUri;\n            }\n\n            if (clientId !== undefined) {\n                localVarQueryParameter['client_id'] = clientId;\n            }\n\n            if (refreshToken !== undefined) {\n                localVarQueryParameter['refresh_token'] = refreshToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * OauthApi - functional programming interface\n * @export\n */\nexport const OauthApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).authorize(responseType, clientId, redirectUri, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).login(loginRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutRequest> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).logout(authorization, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).register(registrationRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).token(grantType, code, redirectUri, clientId, refreshToken, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * OauthApi - factory interface\n * @export\n */\nexport const OauthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any) {\n            return OauthApiFp(configuration).authorize(responseType, clientId, redirectUri, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options?: any) {\n            return OauthApiFp(configuration).login(loginRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options?: any) {\n            return OauthApiFp(configuration).logout(authorization, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options?: any) {\n            return OauthApiFp(configuration).register(registrationRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any) {\n            return OauthApiFp(configuration).token(grantType, code, redirectUri, clientId, refreshToken, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * OauthApi - object-oriented interface\n * @export\n * @class OauthApi\n * @extends {BaseAPI}\n */\nexport class OauthApi extends BaseAPI {\n    /**\n     * \n     * @param {string} [responseType] \n     * @param {string} [clientId] \n     * @param {string} [redirectUri] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any) {\n        return OauthApiFp(this.configuration).authorize(responseType, clientId, redirectUri, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {LoginRequest} [loginRequest] LoginRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public login(loginRequest?: LoginRequest, options?: any) {\n        return OauthApiFp(this.configuration).login(loginRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} [authorization] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public logout(authorization?: string, options?: any) {\n        return OauthApiFp(this.configuration).logout(authorization, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public register(registrationRequest?: RegistrationRequest, options?: any) {\n        return OauthApiFp(this.configuration).register(registrationRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} [grantType] \n     * @param {string} [code] \n     * @param {string} [redirectUri] \n     * @param {string} [clientId] \n     * @param {string} [refreshToken] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any) {\n        return OauthApiFp(this.configuration).token(grantType, code, redirectUri, clientId, refreshToken, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * RouteApi - axios parameter creator\n * @export\n */\nexport const RouteApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateRouteRequest} [createRouteRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoute(createRouteRequest?: CreateRouteRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/route`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof createRouteRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRouteRequest !== undefined ? createRouteRequest : {}) : (createRouteRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRouteById(id: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteRouteById.');\n            }\n            const localVarPath = `/route/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary mostPopularRoutes\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMostPopularRoutes(options: any = {}): RequestArgs {\n            const localVarPath = `/route/most-popular`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRouteById(id: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getRouteById.');\n            }\n            const localVarPath = `/route/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} routeId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(routeId: string, groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'routeId' is not null or undefined\n            if (routeId === null || routeId === undefined) {\n                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling shareInGroup.');\n            }\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling shareInGroup.');\n            }\n            const localVarPath = `/route/{routeId}/share-in-group/{groupId}`\n                .replace(`{${\"routeId\"}}`, encodeURIComponent(String(routeId)))\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {UpdateRouteRequest} [updateRouteRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRouteById(id: string, updateRouteRequest?: UpdateRouteRequest, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling updateRouteById.');\n            }\n            const localVarPath = `/route/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof updateRouteRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRouteRequest !== undefined ? updateRouteRequest : {}) : (updateRouteRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * RouteApi - functional programming interface\n * @export\n */\nexport const RouteApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {CreateRouteRequest} [createRouteRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoute(createRouteRequest?: CreateRouteRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {\n            const localVarAxiosArgs = RouteApiAxiosParamCreator(configuration).createRoute(createRouteRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRouteById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = RouteApiAxiosParamCreator(configuration).deleteRouteById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary mostPopularRoutes\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMostPopularRoutes(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RouteResponse>> {\n            const localVarAxiosArgs = RouteApiAxiosParamCreator(configuration).getMostPopularRoutes(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRouteById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RouteResponse> {\n            const localVarAxiosArgs = RouteApiAxiosParamCreator(configuration).getRouteById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} routeId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(routeId: string, groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = RouteApiAxiosParamCreator(configuration).shareInGroup(routeId, groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {UpdateRouteRequest} [updateRouteRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRouteById(id: string, updateRouteRequest?: UpdateRouteRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = RouteApiAxiosParamCreator(configuration).updateRouteById(id, updateRouteRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * RouteApi - factory interface\n * @export\n */\nexport const RouteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {CreateRouteRequest} [createRouteRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoute(createRouteRequest?: CreateRouteRequest, options?: any) {\n            return RouteApiFp(configuration).createRoute(createRouteRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRouteById(id: string, options?: any) {\n            return RouteApiFp(configuration).deleteRouteById(id, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary mostPopularRoutes\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMostPopularRoutes(options?: any) {\n            return RouteApiFp(configuration).getMostPopularRoutes(options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRouteById(id: string, options?: any) {\n            return RouteApiFp(configuration).getRouteById(id, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} routeId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(routeId: string, groupId: string, options?: any) {\n            return RouteApiFp(configuration).shareInGroup(routeId, groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {UpdateRouteRequest} [updateRouteRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRouteById(id: string, updateRouteRequest?: UpdateRouteRequest, options?: any) {\n            return RouteApiFp(configuration).updateRouteById(id, updateRouteRequest, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * RouteApi - object-oriented interface\n * @export\n * @class RouteApi\n * @extends {BaseAPI}\n */\nexport class RouteApi extends BaseAPI {\n    /**\n     * \n     * @param {CreateRouteRequest} [createRouteRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RouteApi\n     */\n    public createRoute(createRouteRequest?: CreateRouteRequest, options?: any) {\n        return RouteApiFp(this.configuration).createRoute(createRouteRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RouteApi\n     */\n    public deleteRouteById(id: string, options?: any) {\n        return RouteApiFp(this.configuration).deleteRouteById(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary mostPopularRoutes\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RouteApi\n     */\n    public getMostPopularRoutes(options?: any) {\n        return RouteApiFp(this.configuration).getMostPopularRoutes(options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Your GET endpoint\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RouteApi\n     */\n    public getRouteById(id: string, options?: any) {\n        return RouteApiFp(this.configuration).getRouteById(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} routeId \n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RouteApi\n     */\n    public shareInGroup(routeId: string, groupId: string, options?: any) {\n        return RouteApiFp(this.configuration).shareInGroup(routeId, groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {UpdateRouteRequest} [updateRouteRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RouteApi\n     */\n    public updateRouteById(id: string, updateRouteRequest?: UpdateRouteRequest, options?: any) {\n        return RouteApiFp(this.configuration).updateRouteById(id, updateRouteRequest, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n","module.exports = require(\"url\");","// tslint:disable\n/**\n * swagger\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:3001\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n"],"sourceRoot":""}