{"version":3,"sources":["webpack://tyr-map/webpack/universalModuleDefinition","webpack://tyr-map/webpack/bootstrap","webpack://tyr-map/external \"axios\"","webpack://tyr-map/./src/index.ts","webpack://tyr-map/./src/axios/api.ts","webpack://tyr-map/external \"url\"","webpack://tyr-map/./src/axios/base.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","AxiosApi","axiosApi","GroupApiAxiosParamCreator","configuration","createGroup","groupRequest","options","baseOptions","localVarUrlObj","globalImportUrl","parse","localVarRequestOptions","method","localVarHeaderParameter","query","search","headers","needsSerialization","data","JSON","stringify","undefined","url","format","findById","groupId","RequiredError","localVarPath","replace","encodeURIComponent","String","getGroupsPaged","page","size","filters","sortBy","localVarQueryParameter","groupGroupIdDelete","joinGroup","leaveGroup","updateGroup","GroupApiFp","localVarAxiosArgs","axios","basePath","BASE_PATH","axiosRequestArgs","request","GroupApiFactory","this","BaseAPI","GroupApi","OauthApiAxiosParamCreator","authorize","responseType","clientId","redirectUri","login","loginRequest","logout","authorization","postOauthLogoutAll","logoutRequest","register","registrationRequest","token","grantType","code","refreshToken","OauthApiFp","OauthApiFactory","OauthApi","PathApiAxiosParamCreator","createPath","pathRequest","deletePathById","id","findAllAvailableByFilters","getPathById","shareInGroup","pathId","updatePathById","PathApiFp","PathApiFactory","PathApi","COLLECTION_FORMATS","csv","ssv","tsv","pipes","field","msg","Error"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tyr-map\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tyr-map\"] = factory();\n\telse\n\t\troot[\"tyr-map\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"axios\");","import * as axiosApi from './axios/api';\r\nexport const AxiosApi = axiosApi;\r\n","// tslint:disable\n/**\n * swagger\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AuditDto\n */\nexport interface AuditDto {\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    createdBy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    createdAt?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    modifiedBy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    modifiedAt?: string;\n}\n/**\n * \n * @export\n * @interface CreatedRespone\n */\nexport interface CreatedRespone {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatedRespone\n     */\n    id: string;\n}\n/**\n * \n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    cause: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    message?: string;\n}\n/**\n * \n * @export\n * @interface GroupPageResponse\n */\nexport interface GroupPageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<GroupResponse>}\n     * @memberof GroupPageResponse\n     */\n    items: Array<GroupResponse>;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPageResponse\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface GroupPageResponseAllOf\n */\nexport interface GroupPageResponseAllOf {\n    /**\n     * \n     * @type {Array<GroupResponse>}\n     * @memberof GroupPageResponseAllOf\n     */\n    items?: Array<GroupResponse>;\n}\n/**\n * \n * @export\n * @interface GroupRequest\n */\nexport interface GroupRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupRequest\n     */\n    joinPolicy?: number;\n}\n/**\n * \n * @export\n * @interface GroupResponse\n */\nexport interface GroupResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    description: string;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupResponse\n     */\n    joinPolicy?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    owner: string;\n}\n/**\n * \n * @export\n * @interface LineStringDto\n */\nexport interface LineStringDto {\n    /**\n     * \n     * @type {string}\n     * @memberof LineStringDto\n     */\n    type: string;\n    /**\n     * \n     * @type {Array<Array<number>>}\n     * @memberof LineStringDto\n     */\n    coordinates: Array<Array<number>>;\n}\n/**\n * \n * @export\n * @interface LoginRequest\n */\nexport interface LoginRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    password?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    clientId?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    redirectUri?: string;\n}\n/**\n * \n * @export\n * @interface LoginResponse\n */\nexport interface LoginResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResponse\n     */\n    code: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResponse\n     */\n    redirectUri: string;\n}\n/**\n * \n * @export\n * @interface LogoutRequest\n */\nexport interface LogoutRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof LogoutRequest\n     */\n    accessToken?: string;\n}\n/**\n * \n * @export\n * @interface PageResponse\n */\nexport interface PageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof PageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<object>}\n     * @memberof PageResponse\n     */\n    items: Array<object>;\n    /**\n     * \n     * @type {number}\n     * @memberof PageResponse\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface PathPageResponse\n */\nexport interface PathPageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof PathPageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PathPageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<PathResponse>}\n     * @memberof PathPageResponse\n     */\n    items: Array<PathResponse>;\n    /**\n     * \n     * @type {number}\n     * @memberof PathPageResponse\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface PathPageResponseAllOf\n */\nexport interface PathPageResponseAllOf {\n    /**\n     * \n     * @type {Array<PathResponse>}\n     * @memberof PathPageResponseAllOf\n     */\n    items?: Array<PathResponse>;\n}\n/**\n * \n * @export\n * @interface PathRequest\n */\nexport interface PathRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof PathRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PathRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {LineStringDto}\n     * @memberof PathRequest\n     */\n    path?: LineStringDto;\n}\n/**\n * \n * @export\n * @interface PathResponse\n */\nexport interface PathResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof PathResponse\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PathResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PathResponse\n     */\n    description: string;\n    /**\n     * \n     * @type {LineStringDto}\n     * @memberof PathResponse\n     */\n    path: LineStringDto;\n    /**\n     * \n     * @type {AuditDto}\n     * @memberof PathResponse\n     */\n    audit: AuditDto;\n    /**\n     * \n     * @type {Array<ResourceItemResponse>}\n     * @memberof PathResponse\n     */\n    images: Array<ResourceItemResponse>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PathResponse\n     */\n    isEditable: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof PathResponse\n     */\n    visibility?: number;\n}\n/**\n * \n * @export\n * @interface RegistrationRequest\n */\nexport interface RegistrationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationRequest\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationRequest\n     */\n    password: string;\n}\n/**\n * \n * @export\n * @interface RegistrationResponse\n */\nexport interface RegistrationResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationResponse\n     */\n    userId: string;\n}\n/**\n * \n * @export\n * @interface ResourceItemResponse\n */\nexport interface ResourceItemResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface TokenResponse\n */\nexport interface TokenResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    accessToken: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    accessTokenExpiration: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    refreshToken: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    refreshTokenExpiration: string;\n}\n\n/**\n * GroupApi - axios parameter creator\n * @export\n */\nexport const GroupApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary createGroup\n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(groupRequest?: GroupRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/group`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof groupRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(groupRequest !== undefined ? groupRequest : {}) : (groupRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling findById.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/group/page`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sortBy'] = sortBy;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdDelete.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling joinGroup.');\n            }\n            const localVarPath = `/group/{groupId}/join`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling leaveGroup.');\n            }\n            const localVarPath = `/group/{groupId}/leave`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, groupRequest?: GroupRequest, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling updateGroup.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof groupRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(groupRequest !== undefined ? groupRequest : {}) : (groupRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * GroupApi - functional programming interface\n * @export\n */\nexport const GroupApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary createGroup\n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(groupRequest?: GroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).createGroup(groupRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).findById(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPageResponse> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).getGroupsPaged(page, size, search, filters, sortBy, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).groupGroupIdDelete(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).joinGroup(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).leaveGroup(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).updateGroup(groupId, groupRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * GroupApi - factory interface\n * @export\n */\nexport const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary createGroup\n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(groupRequest?: GroupRequest, options?: any): AxiosPromise<string> {\n            return GroupApiFp(configuration).createGroup(groupRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options?: any): AxiosPromise<GroupResponse> {\n            return GroupApiFp(configuration).findById(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any): AxiosPromise<GroupPageResponse> {\n            return GroupApiFp(configuration).getGroupsPaged(page, size, search, filters, sortBy, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).groupGroupIdDelete(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).joinGroup(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).leaveGroup(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).updateGroup(groupId, groupRequest, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * GroupApi - object-oriented interface\n * @export\n * @class GroupApi\n * @extends {BaseAPI}\n */\nexport class GroupApi extends BaseAPI {\n    /**\n     * \n     * @summary createGroup\n     * @param {GroupRequest} [groupRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public createGroup(groupRequest?: GroupRequest, options?: any) {\n        return GroupApiFp(this.configuration).createGroup(groupRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary findById\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public findById(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).findById(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary getGroupsPaged\n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {string} [search] \n     * @param {Array<number>} [filters] \n     * @param {string} [sortBy] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public getGroupsPaged(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any) {\n        return GroupApiFp(this.configuration).getGroupsPaged(page, size, search, filters, sortBy, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public groupGroupIdDelete(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).groupGroupIdDelete(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary joinGroup\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public joinGroup(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).joinGroup(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary leaveGroup\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public leaveGroup(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).leaveGroup(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary updateGroup\n     * @param {string} groupId \n     * @param {GroupRequest} [groupRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any) {\n        return GroupApiFp(this.configuration).updateGroup(groupId, groupRequest, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * OauthApi - axios parameter creator\n * @export\n */\nexport const OauthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/authorize`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (responseType !== undefined) {\n                localVarQueryParameter['response_type'] = responseType;\n            }\n\n            if (clientId !== undefined) {\n                localVarQueryParameter['client_id'] = clientId;\n            }\n\n            if (redirectUri !== undefined) {\n                localVarQueryParameter['redirect_uri'] = redirectUri;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/login`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof loginRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/logout`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (authorization !== undefined && authorization !== null) {\n                localVarHeaderParameter['Authorization'] = String(authorization);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(page?: number, size?: number, logoutRequest?: LogoutRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/logout/all`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof logoutRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(logoutRequest !== undefined ? logoutRequest : {}) : (logoutRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/register`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof registrationRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registrationRequest !== undefined ? registrationRequest : {}) : (registrationRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/token`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (grantType !== undefined) {\n                localVarQueryParameter['grant_type'] = grantType;\n            }\n\n            if (code !== undefined) {\n                localVarQueryParameter['code'] = code;\n            }\n\n            if (redirectUri !== undefined) {\n                localVarQueryParameter['redirect_uri'] = redirectUri;\n            }\n\n            if (clientId !== undefined) {\n                localVarQueryParameter['client_id'] = clientId;\n            }\n\n            if (refreshToken !== undefined) {\n                localVarQueryParameter['refresh_token'] = refreshToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * OauthApi - functional programming interface\n * @export\n */\nexport const OauthApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).authorize(responseType, clientId, redirectUri, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).login(loginRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutRequest> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).logout(authorization, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(page?: number, size?: number, logoutRequest?: LogoutRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).postOauthLogoutAll(page, size, logoutRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).register(registrationRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).token(grantType, code, redirectUri, clientId, refreshToken, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * OauthApi - factory interface\n * @export\n */\nexport const OauthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any): AxiosPromise<void> {\n            return OauthApiFp(configuration).authorize(responseType, clientId, redirectUri, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<LoginResponse> {\n            return OauthApiFp(configuration).login(loginRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options?: any): AxiosPromise<LogoutRequest> {\n            return OauthApiFp(configuration).logout(authorization, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(page?: number, size?: number, logoutRequest?: LogoutRequest, options?: any): AxiosPromise<void> {\n            return OauthApiFp(configuration).postOauthLogoutAll(page, size, logoutRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options?: any): AxiosPromise<RegistrationResponse> {\n            return OauthApiFp(configuration).register(registrationRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any): AxiosPromise<TokenResponse> {\n            return OauthApiFp(configuration).token(grantType, code, redirectUri, clientId, refreshToken, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * OauthApi - object-oriented interface\n * @export\n * @class OauthApi\n * @extends {BaseAPI}\n */\nexport class OauthApi extends BaseAPI {\n    /**\n     * \n     * @param {string} [responseType] \n     * @param {string} [clientId] \n     * @param {string} [redirectUri] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any) {\n        return OauthApiFp(this.configuration).authorize(responseType, clientId, redirectUri, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {LoginRequest} [loginRequest] LoginRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public login(loginRequest?: LoginRequest, options?: any) {\n        return OauthApiFp(this.configuration).login(loginRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} [authorization] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public logout(authorization?: string, options?: any) {\n        return OauthApiFp(this.configuration).logout(authorization, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {LogoutRequest} [logoutRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public postOauthLogoutAll(page?: number, size?: number, logoutRequest?: LogoutRequest, options?: any) {\n        return OauthApiFp(this.configuration).postOauthLogoutAll(page, size, logoutRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public register(registrationRequest?: RegistrationRequest, options?: any) {\n        return OauthApiFp(this.configuration).register(registrationRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} [grantType] \n     * @param {string} [code] \n     * @param {string} [redirectUri] \n     * @param {string} [clientId] \n     * @param {string} [refreshToken] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any) {\n        return OauthApiFp(this.configuration).token(grantType, code, redirectUri, clientId, refreshToken, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * PathApi - axios parameter creator\n * @export\n */\nexport const PathApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPath(pathRequest?: PathRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/path`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof pathRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pathRequest !== undefined ? pathRequest : {}) : (pathRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePathById(id: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePathById.');\n            }\n            const localVarPath = `/path/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<string>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAllAvailableByFilters(page?: number, size?: number, search?: string, filters?: Array<string>, sortBy?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/path/page`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sortBy'] = sortBy;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPathById(id: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getPathById.');\n            }\n            const localVarPath = `/path/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} pathId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(pathId: string, groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'pathId' is not null or undefined\n            if (pathId === null || pathId === undefined) {\n                throw new RequiredError('pathId','Required parameter pathId was null or undefined when calling shareInGroup.');\n            }\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling shareInGroup.');\n            }\n            const localVarPath = `/path/{pathId}/share-in-group/{groupId}`\n                .replace(`{${\"pathId\"}}`, encodeURIComponent(String(pathId)))\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePathById(id: string, pathRequest?: PathRequest, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePathById.');\n            }\n            const localVarPath = `/path/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof pathRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pathRequest !== undefined ? pathRequest : {}) : (pathRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PathApi - functional programming interface\n * @export\n */\nexport const PathApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPath(pathRequest?: PathRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).createPath(pathRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePathById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).deletePathById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<string>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAllAvailableByFilters(page?: number, size?: number, search?: string, filters?: Array<string>, sortBy?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathPageResponse> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).findAllAvailableByFilters(page, size, search, filters, sortBy, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPathById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathResponse> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).getPathById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} pathId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(pathId: string, groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).shareInGroup(pathId, groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePathById(id: string, pathRequest?: PathRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).updatePathById(id, pathRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * PathApi - factory interface\n * @export\n */\nexport const PathApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPath(pathRequest?: PathRequest, options?: any): AxiosPromise<string> {\n            return PathApiFp(configuration).createPath(pathRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePathById(id: string, options?: any): AxiosPromise<void> {\n            return PathApiFp(configuration).deletePathById(id, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<string>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAllAvailableByFilters(page?: number, size?: number, search?: string, filters?: Array<string>, sortBy?: string, options?: any): AxiosPromise<PathPageResponse> {\n            return PathApiFp(configuration).findAllAvailableByFilters(page, size, search, filters, sortBy, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPathById(id: string, options?: any): AxiosPromise<PathResponse> {\n            return PathApiFp(configuration).getPathById(id, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} pathId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(pathId: string, groupId: string, options?: any): AxiosPromise<void> {\n            return PathApiFp(configuration).shareInGroup(pathId, groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePathById(id: string, pathRequest?: PathRequest, options?: any): AxiosPromise<void> {\n            return PathApiFp(configuration).updatePathById(id, pathRequest, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * PathApi - object-oriented interface\n * @export\n * @class PathApi\n * @extends {BaseAPI}\n */\nexport class PathApi extends BaseAPI {\n    /**\n     * \n     * @param {PathRequest} [pathRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public createPath(pathRequest?: PathRequest, options?: any) {\n        return PathApiFp(this.configuration).createPath(pathRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public deletePathById(id: string, options?: any) {\n        return PathApiFp(this.configuration).deletePathById(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Your GET endpoint\n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {string} [search] \n     * @param {Array<string>} [filters] \n     * @param {string} [sortBy] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public findAllAvailableByFilters(page?: number, size?: number, search?: string, filters?: Array<string>, sortBy?: string, options?: any) {\n        return PathApiFp(this.configuration).findAllAvailableByFilters(page, size, search, filters, sortBy, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Your GET endpoint\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public getPathById(id: string, options?: any) {\n        return PathApiFp(this.configuration).getPathById(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} pathId \n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public shareInGroup(pathId: string, groupId: string, options?: any) {\n        return PathApiFp(this.configuration).shareInGroup(pathId, groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {PathRequest} [pathRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public updatePathById(id: string, pathRequest?: PathRequest, options?: any) {\n        return PathApiFp(this.configuration).updatePathById(id, pathRequest, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n","module.exports = require(\"url\");","// tslint:disable\n/**\n * swagger\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:3001\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n"],"sourceRoot":""}