{"version":3,"sources":["webpack://tyr-map/webpack/universalModuleDefinition","webpack://tyr-map/webpack/bootstrap","webpack://tyr-map/external \"axios\"","webpack://tyr-map/./src/index.ts","webpack://tyr-map/./src/axios/api.ts","webpack://tyr-map/external \"url\"","webpack://tyr-map/./src/axios/base.ts"],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","AxiosApi","axiosApi","GroupApiAxiosParamCreator","configuration","acceptJoinRequest","groupId","userId","options","RequiredError","baseOptions","localVarPath","replace","encodeURIComponent","String","localVarUrlObj","globalImportUrl","parse","localVarRequestOptions","method","query","search","headers","url","format","allowUser","banUser","createGroup","groupRequest","localVarHeaderParameter","needsSerialization","data","JSON","stringify","undefined","declineJoinRequest","findById","getGroupMembers","page","size","localVarQueryParameter","getGroupsPaged","filters","sortBy","groupGroupIdDelete","joinGroup","leaveGroup","updateGroup","GroupApiFp","localVarAxiosArgs","axios","basePath","BASE_PATH","axiosRequestArgs","request","GroupApiFactory","this","BaseAPI","GroupApi","OauthApiAxiosParamCreator","authorize","responseType","clientId","redirectUri","login","loginRequest","logout","authorization","postOauthLogoutAll","logoutRequest","register","registrationRequest","token","grantType","code","refreshToken","OauthApiFp","OauthApiFactory","OauthApi","PathApiAxiosParamCreator","createPath","pathRequest","deletePathById","id","findAllAvailableByFilters","getPathById","shareInGroup","pathId","updatePathById","PathApiFp","PathApiFactory","PathApi","UserApiAxiosParamCreator","getProfileInfo","profileInfoResponse","UserApiFp","UserApiFactory","UserApi","COLLECTION_FORMATS","csv","ssv","tsv","pipes","field","msg","Error"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"tyr-map\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"tyr-map\"] = factory();\n\telse\n\t\troot[\"tyr-map\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = require(\"axios\");","import * as axiosApi from './axios/api';\r\nexport const AxiosApi = axiosApi;\r\n","// tslint:disable\n/**\n * swagger\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AuditDto\n */\nexport interface AuditDto {\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    createdBy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    createdAt?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    modifiedBy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AuditDto\n     */\n    modifiedAt?: string;\n}\n/**\n * \n * @export\n * @interface CreatedRespone\n */\nexport interface CreatedRespone {\n    /**\n     * \n     * @type {string}\n     * @memberof CreatedRespone\n     */\n    id: string;\n}\n/**\n * \n * @export\n * @interface ErrorResponse\n */\nexport interface ErrorResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    cause: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorResponse\n     */\n    message?: string;\n}\n/**\n * \n * @export\n * @interface GroupMemberPageResponse\n */\nexport interface GroupMemberPageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof GroupMemberPageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupMemberPageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<GroupMemberResponse>}\n     * @memberof GroupMemberPageResponse\n     */\n    items: Array<GroupMemberResponse>;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupMemberPageResponse\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface GroupMemberPageResponseAllOf\n */\nexport interface GroupMemberPageResponseAllOf {\n    /**\n     * \n     * @type {Array<GroupMemberResponse>}\n     * @memberof GroupMemberPageResponseAllOf\n     */\n    items?: Array<GroupMemberResponse>;\n}\n/**\n * \n * @export\n * @interface GroupMemberResponse\n */\nexport interface GroupMemberResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupMemberResponse\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupMemberResponse\n     */\n    email?: string;\n}\n/**\n * \n * @export\n * @interface GroupPageResponse\n */\nexport interface GroupPageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<GroupResponse>}\n     * @memberof GroupPageResponse\n     */\n    items: Array<GroupResponse>;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupPageResponse\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface GroupPageResponseAllOf\n */\nexport interface GroupPageResponseAllOf {\n    /**\n     * \n     * @type {Array<GroupResponse>}\n     * @memberof GroupPageResponseAllOf\n     */\n    items?: Array<GroupResponse>;\n}\n/**\n * \n * @export\n * @interface GroupRequest\n */\nexport interface GroupRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupRequest\n     */\n    joinPolicy?: number;\n}\n/**\n * \n * @export\n * @interface GroupResponse\n */\nexport interface GroupResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    description: string;\n    /**\n     * \n     * @type {number}\n     * @memberof GroupResponse\n     */\n    joinPolicy: number;\n    /**\n     * \n     * @type {string}\n     * @memberof GroupResponse\n     */\n    owner: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GroupResponse\n     */\n    isEditable: boolean;\n    /**\n     * \n     * @type {AuditDto}\n     * @memberof GroupResponse\n     */\n    audit: AuditDto;\n    /**\n     * \n     * @type {boolean}\n     * @memberof GroupResponse\n     */\n    isMember: boolean;\n}\n/**\n * \n * @export\n * @interface LineStringDto\n */\nexport interface LineStringDto {\n    /**\n     * \n     * @type {string}\n     * @memberof LineStringDto\n     */\n    type: string;\n    /**\n     * \n     * @type {Array<Array<number>>}\n     * @memberof LineStringDto\n     */\n    coordinates: Array<Array<number>>;\n}\n/**\n * \n * @export\n * @interface LoginRequest\n */\nexport interface LoginRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    password?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    clientId?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginRequest\n     */\n    redirectUri?: string;\n}\n/**\n * \n * @export\n * @interface LoginResponse\n */\nexport interface LoginResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResponse\n     */\n    code: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LoginResponse\n     */\n    redirectUri: string;\n}\n/**\n * \n * @export\n * @interface LogoutRequest\n */\nexport interface LogoutRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof LogoutRequest\n     */\n    accessToken?: string;\n}\n/**\n * \n * @export\n * @interface PageResponse\n */\nexport interface PageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof PageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<object>}\n     * @memberof PageResponse\n     */\n    items: Array<object>;\n    /**\n     * \n     * @type {number}\n     * @memberof PageResponse\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface PathPageResponse\n */\nexport interface PathPageResponse {\n    /**\n     * \n     * @type {number}\n     * @memberof PathPageResponse\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PathPageResponse\n     */\n    size: number;\n    /**\n     * \n     * @type {Array<PathResponse>}\n     * @memberof PathPageResponse\n     */\n    items: Array<PathResponse>;\n    /**\n     * \n     * @type {number}\n     * @memberof PathPageResponse\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface PathPageResponseAllOf\n */\nexport interface PathPageResponseAllOf {\n    /**\n     * \n     * @type {Array<PathResponse>}\n     * @memberof PathPageResponseAllOf\n     */\n    items?: Array<PathResponse>;\n}\n/**\n * \n * @export\n * @interface PathRequest\n */\nexport interface PathRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof PathRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PathRequest\n     */\n    description?: string;\n    /**\n     * \n     * @type {LineStringDto}\n     * @memberof PathRequest\n     */\n    path?: LineStringDto;\n}\n/**\n * \n * @export\n * @interface PathResponse\n */\nexport interface PathResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof PathResponse\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PathResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PathResponse\n     */\n    description: string;\n    /**\n     * \n     * @type {LineStringDto}\n     * @memberof PathResponse\n     */\n    path: LineStringDto;\n    /**\n     * \n     * @type {AuditDto}\n     * @memberof PathResponse\n     */\n    audit: AuditDto;\n    /**\n     * \n     * @type {Array<ResourceItemResponse>}\n     * @memberof PathResponse\n     */\n    images: Array<ResourceItemResponse>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof PathResponse\n     */\n    isEditable: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof PathResponse\n     */\n    visibility?: number;\n}\n/**\n * \n * @export\n * @interface ProfileInfoResponse\n */\nexport interface ProfileInfoResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ProfileInfoResponse\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ProfileInfoResponse\n     */\n    email?: string;\n}\n/**\n * \n * @export\n * @interface RegistrationRequest\n */\nexport interface RegistrationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationRequest\n     */\n    email: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationRequest\n     */\n    password: string;\n}\n/**\n * \n * @export\n * @interface RegistrationResponse\n */\nexport interface RegistrationResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistrationResponse\n     */\n    userId: string;\n}\n/**\n * \n * @export\n * @interface ResourceItemResponse\n */\nexport interface ResourceItemResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceItemResponse\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface TokenResponse\n */\nexport interface TokenResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    accessToken: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    accessTokenExpiration: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    refreshToken: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TokenResponse\n     */\n    refreshTokenExpiration: string;\n}\n\n/**\n * GroupApi - axios parameter creator\n * @export\n */\nexport const GroupApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        acceptJoinRequest(groupId: string, userId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling acceptJoinRequest.');\n            }\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling acceptJoinRequest.');\n            }\n            const localVarPath = `/group/{groupId}/join-request/accept/{userId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allowUser(groupId: string, userId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling allowUser.');\n            }\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling allowUser.');\n            }\n            const localVarPath = `/group/{groupId}/allow/{userId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        banUser(groupId: string, userId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling banUser.');\n            }\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling banUser.');\n            }\n            const localVarPath = `/group/{groupId}/ban/{userId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary createGroup\n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(groupRequest?: GroupRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/group`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof groupRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(groupRequest !== undefined ? groupRequest : {}) : (groupRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        declineJoinRequest(groupId: string, userId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling declineJoinRequest.');\n            }\n            // verify required parameter 'userId' is not null or undefined\n            if (userId === null || userId === undefined) {\n                throw new RequiredError('userId','Required parameter userId was null or undefined when calling declineJoinRequest.');\n            }\n            const localVarPath = `/group/{groupId}/join-request/decline/{userId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)))\n                .replace(`{${\"userId\"}}`, encodeURIComponent(String(userId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling findById.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} groupId \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupMembers(groupId: string, page?: number, size?: number, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling getGroupMembers.');\n            }\n            const localVarPath = `/group/{groupId}/members/page`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/group/page`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sortBy'] = sortBy;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdDelete.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling joinGroup.');\n            }\n            const localVarPath = `/group/{groupId}/join`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling leaveGroup.');\n            }\n            const localVarPath = `/group/{groupId}/leave`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, groupRequest?: GroupRequest, options: any = {}): RequestArgs {\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling updateGroup.');\n            }\n            const localVarPath = `/group/{groupId}`\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof groupRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(groupRequest !== undefined ? groupRequest : {}) : (groupRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * GroupApi - functional programming interface\n * @export\n */\nexport const GroupApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        acceptJoinRequest(groupId: string, userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).acceptJoinRequest(groupId, userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allowUser(groupId: string, userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).allowUser(groupId, userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        banUser(groupId: string, userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).banUser(groupId, userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary createGroup\n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(groupRequest?: GroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).createGroup(groupRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        declineJoinRequest(groupId: string, userId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).declineJoinRequest(groupId, userId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).findById(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} groupId \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupMembers(groupId: string, page?: number, size?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupMemberPageResponse> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).getGroupMembers(groupId, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPageResponse> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).getGroupsPaged(page, size, search, filters, sortBy, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).groupGroupIdDelete(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).joinGroup(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).leaveGroup(groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse> {\n            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).updateGroup(groupId, groupRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * GroupApi - factory interface\n * @export\n */\nexport const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        acceptJoinRequest(groupId: string, userId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).acceptJoinRequest(groupId, userId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        allowUser(groupId: string, userId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).allowUser(groupId, userId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        banUser(groupId: string, userId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).banUser(groupId, userId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary createGroup\n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup(groupRequest?: GroupRequest, options?: any): AxiosPromise<string> {\n            return GroupApiFp(configuration).createGroup(groupRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {string} userId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        declineJoinRequest(groupId: string, userId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).declineJoinRequest(groupId, userId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary findById\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findById(groupId: string, options?: any): AxiosPromise<GroupResponse> {\n            return GroupApiFp(configuration).findById(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} groupId \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupMembers(groupId: string, page?: number, size?: number, options?: any): AxiosPromise<GroupMemberPageResponse> {\n            return GroupApiFp(configuration).getGroupMembers(groupId, page, size, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary getGroupsPaged\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroupsPaged(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any): AxiosPromise<GroupPageResponse> {\n            return GroupApiFp(configuration).getGroupsPaged(page, size, search, filters, sortBy, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        groupGroupIdDelete(groupId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).groupGroupIdDelete(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary joinGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        joinGroup(groupId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).joinGroup(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary leaveGroup\n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        leaveGroup(groupId: string, options?: any): AxiosPromise<void> {\n            return GroupApiFp(configuration).leaveGroup(groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary updateGroup\n         * @param {string} groupId \n         * @param {GroupRequest} [groupRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any): AxiosPromise<GroupResponse> {\n            return GroupApiFp(configuration).updateGroup(groupId, groupRequest, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * GroupApi - object-oriented interface\n * @export\n * @class GroupApi\n * @extends {BaseAPI}\n */\nexport class GroupApi extends BaseAPI {\n    /**\n     * \n     * @param {string} groupId \n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public acceptJoinRequest(groupId: string, userId: string, options?: any) {\n        return GroupApiFp(this.configuration).acceptJoinRequest(groupId, userId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} groupId \n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public allowUser(groupId: string, userId: string, options?: any) {\n        return GroupApiFp(this.configuration).allowUser(groupId, userId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} groupId \n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public banUser(groupId: string, userId: string, options?: any) {\n        return GroupApiFp(this.configuration).banUser(groupId, userId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary createGroup\n     * @param {GroupRequest} [groupRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public createGroup(groupRequest?: GroupRequest, options?: any) {\n        return GroupApiFp(this.configuration).createGroup(groupRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} groupId \n     * @param {string} userId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public declineJoinRequest(groupId: string, userId: string, options?: any) {\n        return GroupApiFp(this.configuration).declineJoinRequest(groupId, userId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary findById\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public findById(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).findById(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Your GET endpoint\n     * @param {string} groupId \n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public getGroupMembers(groupId: string, page?: number, size?: number, options?: any) {\n        return GroupApiFp(this.configuration).getGroupMembers(groupId, page, size, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary getGroupsPaged\n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {string} [search] \n     * @param {Array<number>} [filters] \n     * @param {string} [sortBy] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public getGroupsPaged(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any) {\n        return GroupApiFp(this.configuration).getGroupsPaged(page, size, search, filters, sortBy, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public groupGroupIdDelete(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).groupGroupIdDelete(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary joinGroup\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public joinGroup(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).joinGroup(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary leaveGroup\n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public leaveGroup(groupId: string, options?: any) {\n        return GroupApiFp(this.configuration).leaveGroup(groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary updateGroup\n     * @param {string} groupId \n     * @param {GroupRequest} [groupRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    public updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any) {\n        return GroupApiFp(this.configuration).updateGroup(groupId, groupRequest, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * OauthApi - axios parameter creator\n * @export\n */\nexport const OauthApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/authorize`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (responseType !== undefined) {\n                localVarQueryParameter['response_type'] = responseType;\n            }\n\n            if (clientId !== undefined) {\n                localVarQueryParameter['client_id'] = clientId;\n            }\n\n            if (redirectUri !== undefined) {\n                localVarQueryParameter['redirect_uri'] = redirectUri;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/login`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof loginRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/logout`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (authorization !== undefined && authorization !== null) {\n                localVarHeaderParameter['Authorization'] = String(authorization);\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(page?: number, size?: number, logoutRequest?: LogoutRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/logout/all`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof logoutRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(logoutRequest !== undefined ? logoutRequest : {}) : (logoutRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/register`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof registrationRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registrationRequest !== undefined ? registrationRequest : {}) : (registrationRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/oauth/token`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (grantType !== undefined) {\n                localVarQueryParameter['grant_type'] = grantType;\n            }\n\n            if (code !== undefined) {\n                localVarQueryParameter['code'] = code;\n            }\n\n            if (redirectUri !== undefined) {\n                localVarQueryParameter['redirect_uri'] = redirectUri;\n            }\n\n            if (clientId !== undefined) {\n                localVarQueryParameter['client_id'] = clientId;\n            }\n\n            if (refreshToken !== undefined) {\n                localVarQueryParameter['refresh_token'] = refreshToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * OauthApi - functional programming interface\n * @export\n */\nexport const OauthApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).authorize(responseType, clientId, redirectUri, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).login(loginRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutRequest> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).logout(authorization, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(page?: number, size?: number, logoutRequest?: LogoutRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).postOauthLogoutAll(page, size, logoutRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).register(registrationRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse> {\n            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).token(grantType, code, redirectUri, clientId, refreshToken, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * OauthApi - factory interface\n * @export\n */\nexport const OauthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {string} [responseType] \n         * @param {string} [clientId] \n         * @param {string} [redirectUri] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any): AxiosPromise<void> {\n            return OauthApiFp(configuration).authorize(responseType, clientId, redirectUri, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {LoginRequest} [loginRequest] LoginRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<LoginResponse> {\n            return OauthApiFp(configuration).login(loginRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} [authorization] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        logout(authorization?: string, options?: any): AxiosPromise<LogoutRequest> {\n            return OauthApiFp(configuration).logout(authorization, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {LogoutRequest} [logoutRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        postOauthLogoutAll(page?: number, size?: number, logoutRequest?: LogoutRequest, options?: any): AxiosPromise<void> {\n            return OauthApiFp(configuration).postOauthLogoutAll(page, size, logoutRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        register(registrationRequest?: RegistrationRequest, options?: any): AxiosPromise<RegistrationResponse> {\n            return OauthApiFp(configuration).register(registrationRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} [grantType] \n         * @param {string} [code] \n         * @param {string} [redirectUri] \n         * @param {string} [clientId] \n         * @param {string} [refreshToken] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any): AxiosPromise<TokenResponse> {\n            return OauthApiFp(configuration).token(grantType, code, redirectUri, clientId, refreshToken, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * OauthApi - object-oriented interface\n * @export\n * @class OauthApi\n * @extends {BaseAPI}\n */\nexport class OauthApi extends BaseAPI {\n    /**\n     * \n     * @param {string} [responseType] \n     * @param {string} [clientId] \n     * @param {string} [redirectUri] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any) {\n        return OauthApiFp(this.configuration).authorize(responseType, clientId, redirectUri, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {LoginRequest} [loginRequest] LoginRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public login(loginRequest?: LoginRequest, options?: any) {\n        return OauthApiFp(this.configuration).login(loginRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} [authorization] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public logout(authorization?: string, options?: any) {\n        return OauthApiFp(this.configuration).logout(authorization, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {LogoutRequest} [logoutRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public postOauthLogoutAll(page?: number, size?: number, logoutRequest?: LogoutRequest, options?: any) {\n        return OauthApiFp(this.configuration).postOauthLogoutAll(page, size, logoutRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {RegistrationRequest} [registrationRequest] RegistrationRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public register(registrationRequest?: RegistrationRequest, options?: any) {\n        return OauthApiFp(this.configuration).register(registrationRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} [grantType] \n     * @param {string} [code] \n     * @param {string} [redirectUri] \n     * @param {string} [clientId] \n     * @param {string} [refreshToken] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OauthApi\n     */\n    public token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any) {\n        return OauthApiFp(this.configuration).token(grantType, code, redirectUri, clientId, refreshToken, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * PathApi - axios parameter creator\n * @export\n */\nexport const PathApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPath(pathRequest?: PathRequest, options: any = {}): RequestArgs {\n            const localVarPath = `/path`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof pathRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pathRequest !== undefined ? pathRequest : {}) : (pathRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePathById(id: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePathById.');\n            }\n            const localVarPath = `/path/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAllAvailableByFilters(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options: any = {}): RequestArgs {\n            const localVarPath = `/path/page`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n            if (sortBy !== undefined) {\n                localVarQueryParameter['sortBy'] = sortBy;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPathById(id: string, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getPathById.');\n            }\n            const localVarPath = `/path/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} pathId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(pathId: string, groupId: string, options: any = {}): RequestArgs {\n            // verify required parameter 'pathId' is not null or undefined\n            if (pathId === null || pathId === undefined) {\n                throw new RequiredError('pathId','Required parameter pathId was null or undefined when calling shareInGroup.');\n            }\n            // verify required parameter 'groupId' is not null or undefined\n            if (groupId === null || groupId === undefined) {\n                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling shareInGroup.');\n            }\n            const localVarPath = `/path/{pathId}/share-in-group/{groupId}`\n                .replace(`{${\"pathId\"}}`, encodeURIComponent(String(pathId)))\n                .replace(`{${\"groupId\"}}`, encodeURIComponent(String(groupId)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePathById(id: string, pathRequest?: PathRequest, options: any = {}): RequestArgs {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePathById.');\n            }\n            const localVarPath = `/path/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof pathRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pathRequest !== undefined ? pathRequest : {}) : (pathRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * PathApi - functional programming interface\n * @export\n */\nexport const PathApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPath(pathRequest?: PathRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).createPath(pathRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePathById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).deletePathById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAllAvailableByFilters(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathPageResponse> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).findAllAvailableByFilters(page, size, search, filters, sortBy, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPathById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathResponse> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).getPathById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} pathId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(pathId: string, groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).shareInGroup(pathId, groupId, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePathById(id: string, pathRequest?: PathRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).updatePathById(id, pathRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * PathApi - factory interface\n * @export\n */\nexport const PathApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPath(pathRequest?: PathRequest, options?: any): AxiosPromise<string> {\n            return PathApiFp(configuration).createPath(pathRequest, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePathById(id: string, options?: any): AxiosPromise<void> {\n            return PathApiFp(configuration).deletePathById(id, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {number} [page] \n         * @param {number} [size] \n         * @param {string} [search] \n         * @param {Array<number>} [filters] \n         * @param {string} [sortBy] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        findAllAvailableByFilters(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any): AxiosPromise<PathPageResponse> {\n            return PathApiFp(configuration).findAllAvailableByFilters(page, size, search, filters, sortBy, options)(axios, basePath);\n        },\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {string} id \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPathById(id: string, options?: any): AxiosPromise<PathResponse> {\n            return PathApiFp(configuration).getPathById(id, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} pathId \n         * @param {string} groupId \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        shareInGroup(pathId: string, groupId: string, options?: any): AxiosPromise<void> {\n            return PathApiFp(configuration).shareInGroup(pathId, groupId, options)(axios, basePath);\n        },\n        /**\n         * \n         * @param {string} id \n         * @param {PathRequest} [pathRequest] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePathById(id: string, pathRequest?: PathRequest, options?: any): AxiosPromise<void> {\n            return PathApiFp(configuration).updatePathById(id, pathRequest, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * PathApi - object-oriented interface\n * @export\n * @class PathApi\n * @extends {BaseAPI}\n */\nexport class PathApi extends BaseAPI {\n    /**\n     * \n     * @param {PathRequest} [pathRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public createPath(pathRequest?: PathRequest, options?: any) {\n        return PathApiFp(this.configuration).createPath(pathRequest, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public deletePathById(id: string, options?: any) {\n        return PathApiFp(this.configuration).deletePathById(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Your GET endpoint\n     * @param {number} [page] \n     * @param {number} [size] \n     * @param {string} [search] \n     * @param {Array<number>} [filters] \n     * @param {string} [sortBy] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public findAllAvailableByFilters(page?: number, size?: number, search?: string, filters?: Array<number>, sortBy?: string, options?: any) {\n        return PathApiFp(this.configuration).findAllAvailableByFilters(page, size, search, filters, sortBy, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @summary Your GET endpoint\n     * @param {string} id \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public getPathById(id: string, options?: any) {\n        return PathApiFp(this.configuration).getPathById(id, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} pathId \n     * @param {string} groupId \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public shareInGroup(pathId: string, groupId: string, options?: any) {\n        return PathApiFp(this.configuration).shareInGroup(pathId, groupId, options)(this.axios, this.basePath);\n    }\n\n    /**\n     * \n     * @param {string} id \n     * @param {PathRequest} [pathRequest] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PathApi\n     */\n    public updatePathById(id: string, pathRequest?: PathRequest, options?: any) {\n        return PathApiFp(this.configuration).updatePathById(id, pathRequest, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n/**\n * UserApi - axios parameter creator\n * @export\n */\nexport const UserApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {ProfileInfoResponse} [profileInfoResponse] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProfileInfo(profileInfoResponse?: ProfileInfoResponse, options: any = {}): RequestArgs {\n            const localVarPath = `/user/profile/info`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};\n            const needsSerialization = (typeof profileInfoResponse !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(profileInfoResponse !== undefined ? profileInfoResponse : {}) : (profileInfoResponse || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * UserApi - functional programming interface\n * @export\n */\nexport const UserApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {ProfileInfoResponse} [profileInfoResponse] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProfileInfo(profileInfoResponse?: ProfileInfoResponse, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {\n            const localVarAxiosArgs = UserApiAxiosParamCreator(configuration).getProfileInfo(profileInfoResponse, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * UserApi - factory interface\n * @export\n */\nexport const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Your GET endpoint\n         * @param {ProfileInfoResponse} [profileInfoResponse] \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getProfileInfo(profileInfoResponse?: ProfileInfoResponse, options?: any): AxiosPromise<void> {\n            return UserApiFp(configuration).getProfileInfo(profileInfoResponse, options)(axios, basePath);\n        },\n    };\n};\n\n/**\n * UserApi - object-oriented interface\n * @export\n * @class UserApi\n * @extends {BaseAPI}\n */\nexport class UserApi extends BaseAPI {\n    /**\n     * \n     * @summary Your GET endpoint\n     * @param {ProfileInfoResponse} [profileInfoResponse] \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof UserApi\n     */\n    public getProfileInfo(profileInfoResponse?: ProfileInfoResponse, options?: any) {\n        return UserApiFp(this.configuration).getProfileInfo(profileInfoResponse, options)(this.axios, this.basePath);\n    }\n\n}\n\n\n","module.exports = require(\"url\");","// tslint:disable\n/**\n * swagger\n * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"http://localhost:3001\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n"],"sourceRoot":""}