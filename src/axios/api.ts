// tslint:disable
/**
 * swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuditDto
 */
export interface AuditDto {
    /**
     * 
     * @type {string}
     * @memberof AuditDto
     */
    createdBy?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditDto
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditDto
     */
    modifiedBy?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditDto
     */
    modifiedAt?: string;
}
/**
 * 
 * @export
 * @interface CreatedRespone
 */
export interface CreatedRespone {
    /**
     * 
     * @type {string}
     * @memberof CreatedRespone
     */
    id: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    cause: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    message?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum GroupJoinPolicy {
    INVITEONLY = 'INVITE_ONLY',
    REQUEST = 'REQUEST',
    PUBLIC = 'PUBLIC'
}

/**
 * 
 * @export
 * @interface GroupPageResponse
 */
export interface GroupPageResponse {
    /**
     * 
     * @type {number}
     * @memberof GroupPageResponse
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof GroupPageResponse
     */
    size: number;
    /**
     * 
     * @type {Array<GroupResponse>}
     * @memberof GroupPageResponse
     */
    items: Array<GroupResponse>;
}
/**
 * 
 * @export
 * @interface GroupPageResponseAllOf
 */
export interface GroupPageResponseAllOf {
    /**
     * 
     * @type {Array<GroupResponse>}
     * @memberof GroupPageResponseAllOf
     */
    items?: Array<GroupResponse>;
}
/**
 * 
 * @export
 * @interface GroupRequest
 */
export interface GroupRequest {
    /**
     * 
     * @type {string}
     * @memberof GroupRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof GroupRequest
     */
    description?: string;
    /**
     * 
     * @type {GroupJoinPolicy}
     * @memberof GroupRequest
     */
    joinPolicy?: GroupJoinPolicy;
}
/**
 * 
 * @export
 * @interface GroupResponse
 */
export interface GroupResponse {
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    description: string;
    /**
     * 
     * @type {GroupJoinPolicy}
     * @memberof GroupResponse
     */
    joinPolicy?: GroupJoinPolicy;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    owner: string;
}
/**
 * 
 * @export
 * @interface LineStringDto
 */
export interface LineStringDto {
    /**
     * 
     * @type {string}
     * @memberof LineStringDto
     */
    type: string;
    /**
     * 
     * @type {Array<Array<number>>}
     * @memberof LineStringDto
     */
    coordinates: Array<Array<number>>;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    redirectUri?: string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    code: string;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    redirectUri: string;
}
/**
 * 
 * @export
 * @interface LogoutRequest
 */
export interface LogoutRequest {
    /**
     * 
     * @type {string}
     * @memberof LogoutRequest
     */
    accessToken?: string;
}
/**
 * 
 * @export
 * @interface PageResponse
 */
export interface PageResponse {
    /**
     * 
     * @type {number}
     * @memberof PageResponse
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PageResponse
     */
    size: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof PageResponse
     */
    items: Array<object>;
}
/**
 * 
 * @export
 * @interface PathRequest
 */
export interface PathRequest {
    /**
     * 
     * @type {string}
     * @memberof PathRequest
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PathRequest
     */
    description?: string;
    /**
     * 
     * @type {LineStringDto}
     * @memberof PathRequest
     */
    path?: LineStringDto;
}
/**
 * 
 * @export
 * @interface PathResponse
 */
export interface PathResponse {
    /**
     * 
     * @type {string}
     * @memberof PathResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PathResponse
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof PathResponse
     */
    description: string;
    /**
     * 
     * @type {LineStringDto}
     * @memberof PathResponse
     */
    path: LineStringDto;
    /**
     * 
     * @type {AuditDto}
     * @memberof PathResponse
     */
    audit: AuditDto;
    /**
     * 
     * @type {Array<ResourceItemResponse>}
     * @memberof PathResponse
     */
    images: Array<ResourceItemResponse>;
    /**
     * 
     * @type {boolean}
     * @memberof PathResponse
     */
    isEditable?: boolean;
}
/**
 * 
 * @export
 * @interface RegistrationRequest
 */
export interface RegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof RegistrationRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface RegistrationResponse
 */
export interface RegistrationResponse {
    /**
     * 
     * @type {string}
     * @memberof RegistrationResponse
     */
    userId: string;
}
/**
 * 
 * @export
 * @interface ResourceItemResponse
 */
export interface ResourceItemResponse {
    /**
     * 
     * @type {string}
     * @memberof ResourceItemResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceItemResponse
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceItemResponse
     */
    url: string;
}
/**
 * 
 * @export
 * @interface TokenResponse
 */
export interface TokenResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    accessToken: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    accessTokenExpiration: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    refreshToken: string;
    /**
     * 
     * @type {string}
     * @memberof TokenResponse
     */
    refreshTokenExpiration: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LogoutRequest} [logoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOauthLogoutAll(logoutRequest?: LogoutRequest, options: any = {}): RequestArgs {
            const localVarPath = `/oauth/logout/all`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof logoutRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(logoutRequest !== undefined ? logoutRequest : {}) : (logoutRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {LogoutRequest} [logoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOauthLogoutAll(logoutRequest?: LogoutRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).postOauthLogoutAll(logoutRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {LogoutRequest} [logoutRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postOauthLogoutAll(logoutRequest?: LogoutRequest, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postOauthLogoutAll(logoutRequest, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {LogoutRequest} [logoutRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postOauthLogoutAll(logoutRequest?: LogoutRequest, options?: any) {
        return DefaultApiFp(this.configuration).postOauthLogoutAll(logoutRequest, options)(this.axios, this.basePath);
    }

}


/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createGroup
         * @param {GroupRequest} [groupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(groupRequest?: GroupRequest, options: any = {}): RequestArgs {
            const localVarPath = `/group`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof groupRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(groupRequest !== undefined ? groupRequest : {}) : (groupRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary findById
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(groupId: string, options: any = {}): RequestArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling findById.');
            }
            const localVarPath = `/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getGroupsPaged
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsPaged(page?: number, size?: number, options: any = {}): RequestArgs {
            const localVarPath = `/group/page`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdDelete(groupId: string, options: any = {}): RequestArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling groupGroupIdDelete.');
            }
            const localVarPath = `/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary joinGroup
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroup(groupId: string, options: any = {}): RequestArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling joinGroup.');
            }
            const localVarPath = `/group/{groupId}/join`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary leaveGroup
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroup(groupId: string, options: any = {}): RequestArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling leaveGroup.');
            }
            const localVarPath = `/group/{groupId}/leave`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary updateGroup
         * @param {string} groupId 
         * @param {GroupRequest} [groupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(groupId: string, groupRequest?: GroupRequest, options: any = {}): RequestArgs {
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling updateGroup.');
            }
            const localVarPath = `/group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof groupRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(groupRequest !== undefined ? groupRequest : {}) : (groupRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary createGroup
         * @param {GroupRequest} [groupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(groupRequest?: GroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).createGroup(groupRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary findById
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse> {
            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).findById(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getGroupsPaged
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsPaged(page?: number, size?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPageResponse> {
            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).getGroupsPaged(page, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdDelete(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).groupGroupIdDelete(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary joinGroup
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).joinGroup(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary leaveGroup
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroup(groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).leaveGroup(groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary updateGroup
         * @param {string} groupId 
         * @param {GroupRequest} [groupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = GroupApiAxiosParamCreator(configuration).updateGroup(groupId, groupRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary createGroup
         * @param {GroupRequest} [groupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(groupRequest?: GroupRequest, options?: any): AxiosPromise<string> {
            return GroupApiFp(configuration).createGroup(groupRequest, options)(axios, basePath);
        },
        /**
         * 
         * @summary findById
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findById(groupId: string, options?: any): AxiosPromise<GroupResponse> {
            return GroupApiFp(configuration).findById(groupId, options)(axios, basePath);
        },
        /**
         * 
         * @summary getGroupsPaged
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupsPaged(page?: number, size?: number, options?: any): AxiosPromise<GroupPageResponse> {
            return GroupApiFp(configuration).getGroupsPaged(page, size, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdDelete(groupId: string, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).groupGroupIdDelete(groupId, options)(axios, basePath);
        },
        /**
         * 
         * @summary joinGroup
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGroup(groupId: string, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).joinGroup(groupId, options)(axios, basePath);
        },
        /**
         * 
         * @summary leaveGroup
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGroup(groupId: string, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).leaveGroup(groupId, options)(axios, basePath);
        },
        /**
         * 
         * @summary updateGroup
         * @param {string} groupId 
         * @param {GroupRequest} [groupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any): AxiosPromise<void> {
            return GroupApiFp(configuration).updateGroup(groupId, groupRequest, options)(axios, basePath);
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * 
     * @summary createGroup
     * @param {GroupRequest} [groupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public createGroup(groupRequest?: GroupRequest, options?: any) {
        return GroupApiFp(this.configuration).createGroup(groupRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary findById
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public findById(groupId: string, options?: any) {
        return GroupApiFp(this.configuration).findById(groupId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary getGroupsPaged
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public getGroupsPaged(page?: number, size?: number, options?: any) {
        return GroupApiFp(this.configuration).getGroupsPaged(page, size, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdDelete(groupId: string, options?: any) {
        return GroupApiFp(this.configuration).groupGroupIdDelete(groupId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary joinGroup
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public joinGroup(groupId: string, options?: any) {
        return GroupApiFp(this.configuration).joinGroup(groupId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary leaveGroup
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public leaveGroup(groupId: string, options?: any) {
        return GroupApiFp(this.configuration).leaveGroup(groupId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary updateGroup
     * @param {string} groupId 
     * @param {GroupRequest} [groupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public updateGroup(groupId: string, groupRequest?: GroupRequest, options?: any) {
        return GroupApiFp(this.configuration).updateGroup(groupId, groupRequest, options)(this.axios, this.basePath);
    }

}


/**
 * OauthApi - axios parameter creator
 * @export
 */
export const OauthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [responseType] 
         * @param {string} [clientId] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize(responseType?: string, clientId?: string, redirectUri?: string, options: any = {}): RequestArgs {
            const localVarPath = `/oauth/authorize`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (responseType !== undefined) {
                localVarQueryParameter['response_type'] = responseType;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] LoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options: any = {}): RequestArgs {
            const localVarPath = `/oauth/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof loginRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginRequest !== undefined ? loginRequest : {}) : (loginRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(authorization?: string, options: any = {}): RequestArgs {
            const localVarPath = `/oauth/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registrationRequest?: RegistrationRequest, options: any = {}): RequestArgs {
            const localVarPath = `/oauth/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof registrationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(registrationRequest !== undefined ? registrationRequest : {}) : (registrationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [grantType] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [clientId] 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options: any = {}): RequestArgs {
            const localVarPath = `/oauth/token`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (grantType !== undefined) {
                localVarQueryParameter['grant_type'] = grantType;
            }

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (redirectUri !== undefined) {
                localVarQueryParameter['redirect_uri'] = redirectUri;
            }

            if (clientId !== undefined) {
                localVarQueryParameter['client_id'] = clientId;
            }

            if (refreshToken !== undefined) {
                localVarQueryParameter['refresh_token'] = refreshToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OauthApi - functional programming interface
 * @export
 */
export const OauthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [responseType] 
         * @param {string} [clientId] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).authorize(responseType, clientId, redirectUri, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] LoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse> {
            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).login(loginRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LogoutRequest> {
            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).logout(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registrationRequest?: RegistrationRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationResponse> {
            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).register(registrationRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} [grantType] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [clientId] 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse> {
            const localVarAxiosArgs = OauthApiAxiosParamCreator(configuration).token(grantType, code, redirectUri, clientId, refreshToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OauthApi - factory interface
 * @export
 */
export const OauthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [responseType] 
         * @param {string} [clientId] 
         * @param {string} [redirectUri] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any): AxiosPromise<void> {
            return OauthApiFp(configuration).authorize(responseType, clientId, redirectUri, options)(axios, basePath);
        },
        /**
         * 
         * @param {LoginRequest} [loginRequest] LoginRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(loginRequest?: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return OauthApiFp(configuration).login(loginRequest, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(authorization?: string, options?: any): AxiosPromise<LogoutRequest> {
            return OauthApiFp(configuration).logout(authorization, options)(axios, basePath);
        },
        /**
         * 
         * @param {RegistrationRequest} [registrationRequest] RegistrationRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(registrationRequest?: RegistrationRequest, options?: any): AxiosPromise<RegistrationResponse> {
            return OauthApiFp(configuration).register(registrationRequest, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} [grantType] 
         * @param {string} [code] 
         * @param {string} [redirectUri] 
         * @param {string} [clientId] 
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any): AxiosPromise<TokenResponse> {
            return OauthApiFp(configuration).token(grantType, code, redirectUri, clientId, refreshToken, options)(axios, basePath);
        },
    };
};

/**
 * OauthApi - object-oriented interface
 * @export
 * @class OauthApi
 * @extends {BaseAPI}
 */
export class OauthApi extends BaseAPI {
    /**
     * 
     * @param {string} [responseType] 
     * @param {string} [clientId] 
     * @param {string} [redirectUri] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public authorize(responseType?: string, clientId?: string, redirectUri?: string, options?: any) {
        return OauthApiFp(this.configuration).authorize(responseType, clientId, redirectUri, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {LoginRequest} [loginRequest] LoginRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public login(loginRequest?: LoginRequest, options?: any) {
        return OauthApiFp(this.configuration).login(loginRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public logout(authorization?: string, options?: any) {
        return OauthApiFp(this.configuration).logout(authorization, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RegistrationRequest} [registrationRequest] RegistrationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public register(registrationRequest?: RegistrationRequest, options?: any) {
        return OauthApiFp(this.configuration).register(registrationRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} [grantType] 
     * @param {string} [code] 
     * @param {string} [redirectUri] 
     * @param {string} [clientId] 
     * @param {string} [refreshToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OauthApi
     */
    public token(grantType?: string, code?: string, redirectUri?: string, clientId?: string, refreshToken?: string, options?: any) {
        return OauthApiFp(this.configuration).token(grantType, code, redirectUri, clientId, refreshToken, options)(this.axios, this.basePath);
    }

}


/**
 * PathApi - axios parameter creator
 * @export
 */
export const PathApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PathRequest} [pathRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPath(pathRequest?: PathRequest, options: any = {}): RequestArgs {
            const localVarPath = `/path`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof pathRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pathRequest !== undefined ? pathRequest : {}) : (pathRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePathById(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePathById.');
            }
            const localVarPath = `/path/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary getByFilter
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByFilter(filter: string, options: any = {}): RequestArgs {
            // verify required parameter 'filter' is not null or undefined
            if (filter === null || filter === undefined) {
                throw new RequiredError('filter','Required parameter filter was null or undefined when calling getByFilter.');
            }
            const localVarPath = `/path/list/{filter}`
                .replace(`{${"filter"}}`, encodeURIComponent(String(filter)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPathById(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPathById.');
            }
            const localVarPath = `/path/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} pathId 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareInGroup(pathId: string, groupId: string, options: any = {}): RequestArgs {
            // verify required parameter 'pathId' is not null or undefined
            if (pathId === null || pathId === undefined) {
                throw new RequiredError('pathId','Required parameter pathId was null or undefined when calling shareInGroup.');
            }
            // verify required parameter 'groupId' is not null or undefined
            if (groupId === null || groupId === undefined) {
                throw new RequiredError('groupId','Required parameter groupId was null or undefined when calling shareInGroup.');
            }
            const localVarPath = `/path/{pathId}/share-in-group/{groupId}`
                .replace(`{${"pathId"}}`, encodeURIComponent(String(pathId)))
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PathRequest} [pathRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePathById(id: string, pathRequest?: PathRequest, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePathById.');
            }
            const localVarPath = `/path/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof pathRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(pathRequest !== undefined ? pathRequest : {}) : (pathRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PathApi - functional programming interface
 * @export
 */
export const PathApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PathRequest} [pathRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPath(pathRequest?: PathRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).createPath(pathRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePathById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).deletePathById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary getByFilter
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByFilter(filter: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PathResponse>> {
            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).getByFilter(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPathById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PathResponse> {
            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).getPathById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} pathId 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareInGroup(pathId: string, groupId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).shareInGroup(pathId, groupId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {PathRequest} [pathRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePathById(id: string, pathRequest?: PathRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = PathApiAxiosParamCreator(configuration).updatePathById(id, pathRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PathApi - factory interface
 * @export
 */
export const PathApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {PathRequest} [pathRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPath(pathRequest?: PathRequest, options?: any): AxiosPromise<string> {
            return PathApiFp(configuration).createPath(pathRequest, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePathById(id: string, options?: any): AxiosPromise<void> {
            return PathApiFp(configuration).deletePathById(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary getByFilter
         * @param {string} filter 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getByFilter(filter: string, options?: any): AxiosPromise<Array<PathResponse>> {
            return PathApiFp(configuration).getByFilter(filter, options)(axios, basePath);
        },
        /**
         * 
         * @summary Your GET endpoint
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPathById(id: string, options?: any): AxiosPromise<PathResponse> {
            return PathApiFp(configuration).getPathById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} pathId 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shareInGroup(pathId: string, groupId: string, options?: any): AxiosPromise<void> {
            return PathApiFp(configuration).shareInGroup(pathId, groupId, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {PathRequest} [pathRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePathById(id: string, pathRequest?: PathRequest, options?: any): AxiosPromise<void> {
            return PathApiFp(configuration).updatePathById(id, pathRequest, options)(axios, basePath);
        },
    };
};

/**
 * PathApi - object-oriented interface
 * @export
 * @class PathApi
 * @extends {BaseAPI}
 */
export class PathApi extends BaseAPI {
    /**
     * 
     * @param {PathRequest} [pathRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PathApi
     */
    public createPath(pathRequest?: PathRequest, options?: any) {
        return PathApiFp(this.configuration).createPath(pathRequest, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PathApi
     */
    public deletePathById(id: string, options?: any) {
        return PathApiFp(this.configuration).deletePathById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary getByFilter
     * @param {string} filter 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PathApi
     */
    public getByFilter(filter: string, options?: any) {
        return PathApiFp(this.configuration).getByFilter(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Your GET endpoint
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PathApi
     */
    public getPathById(id: string, options?: any) {
        return PathApiFp(this.configuration).getPathById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} pathId 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PathApi
     */
    public shareInGroup(pathId: string, groupId: string, options?: any) {
        return PathApiFp(this.configuration).shareInGroup(pathId, groupId, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {PathRequest} [pathRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PathApi
     */
    public updatePathById(id: string, pathRequest?: PathRequest, options?: any) {
        return PathApiFp(this.configuration).updatePathById(id, pathRequest, options)(this.axios, this.basePath);
    }

}


