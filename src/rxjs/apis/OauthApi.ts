// tslint:disable
/**
 * swagger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery } from '../runtime';
import {
    LoginRequest,
    LoginResponse,
    LogoutRequest,
    RegistrationRequest,
    RegistrationResponse,
    TokenResponse,
} from '../models';

export interface AuthorizeOpRequest {
    responseType?: string;
    clientId?: string;
    redirectUri?: string;
}

export interface LoginOpRequest {
    loginRequest?: LoginRequest;
}

export interface LogoutOpRequest {
    authorization?: string;
}

export interface RegisterOpRequest {
    registrationRequest?: RegistrationRequest;
}

export interface TokenOpRequest {
    grantType?: string;
    code?: string;
    redirectUri?: string;
    clientId?: string;
    refreshToken?: string;
}

/**
 * no description
 */
export class OauthApi extends BaseAPI {

    /**
     */
    authorizeOp = ({ responseType, clientId, redirectUri }: AuthorizeOpRequest): Observable<void> => {

        const query: HttpQuery = {};

        if (responseType != null) { query['response_type'] = responseType; }
        if (clientId != null) { query['client_id'] = clientId; }
        if (redirectUri != null) { query['redirect_uri'] = redirectUri; }

        return this.request<void>({
            path: '/oauth/authorize',
            method: 'POST',
            query,
        });
    };

    /**
     */
    loginOp = ({ loginRequest }: LoginOpRequest): Observable<LoginResponse> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LoginResponse>({
            path: '/oauth/login',
            method: 'POST',
            headers,
            body: loginRequest,
        });
    };

    /**
     */
    logoutOp = ({ authorization }: LogoutOpRequest): Observable<LogoutRequest> => {

        const headers: HttpHeaders = {
            ...(authorization != null ? { 'Authorization': String(authorization) } : undefined),
        };

        return this.request<LogoutRequest>({
            path: '/oauth/logout',
            method: 'POST',
            headers,
        });
    };

    /**
     */
    registerOp = ({ registrationRequest }: RegisterOpRequest): Observable<RegistrationResponse> => {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<RegistrationResponse>({
            path: '/oauth/register',
            method: 'POST',
            headers,
            body: registrationRequest,
        });
    };

    /**
     */
    tokenOp = ({ grantType, code, redirectUri, clientId, refreshToken }: TokenOpRequest): Observable<TokenResponse> => {

        const query: HttpQuery = {};

        if (grantType != null) { query['grant_type'] = grantType; }
        if (code != null) { query['code'] = code; }
        if (redirectUri != null) { query['redirect_uri'] = redirectUri; }
        if (clientId != null) { query['client_id'] = clientId; }
        if (refreshToken != null) { query['refresh_token'] = refreshToken; }

        return this.request<TokenResponse>({
            path: '/oauth/token',
            method: 'POST',
            query,
        });
    };

}
