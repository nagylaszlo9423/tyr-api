openapi: 3.0.0
info:
  title: swagger
  version: '1.0'
  contact:
    name: tyr
tags:
  - name: oauth
  - name: path
  - name: group
  - name: user
servers:
  - url: 'http://localhost:3001'
    description: local-dev
paths:
  /oauth/login:
    post:
      summary: ''
      tags:
        - oauth
      responses:
        '200':
          description: LoginResponse
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        description: LoginRequest
      operationId: login
  /oauth/register:
    post:
      summary: ''
      tags:
        - oauth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationRequest'
        description: RegistrationRequest
      operationId: register
  /oauth/authorize:
    post:
      summary: ''
      tags:
        - oauth
      responses:
        '301':
          description: Moved Permanently
      description: ''
      parameters:
        - schema:
            type: string
          in: query
          name: response_type
        - schema:
            type: string
          in: query
          name: client_id
        - schema:
            type: string
          in: query
          name: redirect_uri
      operationId: authorize
  /oauth/logout:
    post:
      summary: ''
      tags:
        - oauth
      parameters:
        - schema:
            type: string
          in: header
          name: Authorization
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutRequest'
      operationId: logout
  /path:
    post:
      summary: ''
      tags:
        - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
      operationId: createPath
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathRequest'
        description: ''
  '/path/{id}':
    get:
      summary: Your GET endpoint
      tags:
        - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: getPathById
    put:
      summary: ''
      tags:
        - path
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathRequest'
      operationId: updatePathById
    delete:
      summary: ''
      tags:
        - path
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: deletePathById
    parameters:
      - schema:
          type: string
        name: id
        in: path
        required: true
  '/path/{pathId}/share-in-group/{groupId}':
    parameters:
      - name: pathId
        in: path
        required: true
        schema:
          type: string
        description: ''
      - name: groupId
        in: path
        required: true
        schema:
          type: string
    post:
      summary: ''
      responses:
        '200':
          description: OK
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: shareInGroup
      tags:
        - path
  /oauth/token:
    post:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
      parameters:
        - schema:
            type: string
          in: query
          name: grant_type
        - schema:
            type: string
          in: query
          name: code
        - schema:
            type: string
          in: query
          name: redirect_uri
        - schema:
            type: string
          in: query
          name: client_id
        - schema:
            type: string
          in: query
          name: refresh_token
      operationId: token
      tags:
        - oauth
  /group:
    post:
      summary: createGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                $ref: '#/components/schemas/GroupResponse'
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      tags:
        - group
  '/group/{groupId}':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: findById
      tags:
        - group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: ''
      operationId: findById
    put:
      summary: updateGroup
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupResponse'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: updateGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupRequest'
      tags:
        - group
    delete:
      summary: ''
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      tags:
        - group
  '/group/{groupId}/join':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    post:
      summary: joinGroup
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      description: ''
      operationId: joinGroup
      tags:
        - group
  '/group/{groupId}/leave':
    parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
    post:
      summary: leaveGroup
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      operationId: leaveGroup
      tags:
        - group
  /group/page:
    get:
      summary: getGroupsPaged
      tags:
        - group
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - schema:
            type: string
          in: query
          name: search
        - schema:
            type: array
            items:
              type: number
          in: query
          name: filters
          description: ''
        - schema:
            type: string
          in: query
          name: sortBy
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupPageResponse'
      operationId: getGroupsPaged
  /oauth/logout/all:
    post:
      tags:
        - oauth
      summary: ''
      operationId: post-oauth-logout-all
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
  /path/page:
    get:
      summary: Your GET endpoint
      tags:
        - path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PathPageResponse'
      operationId: findAllAvailableByFilters
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - schema:
            type: string
          in: query
          name: search
        - schema:
            type: array
            items:
              type: number
          in: query
          name: filters
          description: ''
        - schema:
            type: string
          in: query
          name: sortBy
  '/group/{groupId}/members/page':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupMemberPageResponse'
      operationId: getGroupMembers
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
      tags:
        - group
  '/group/{groupId}/join-request/accept/{userId}':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: ''
      operationId: acceptJoinRequest
      responses:
        '200':
          description: OK
      tags:
        - group
      description: ''
  '/group/{groupId}/join-request/decline/{userId}':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: ''
      operationId: declineJoinRequest
      responses:
        '200':
          description: OK
      tags:
        - group
  '/group/{groupId}/ban/{userId}':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: ''
      operationId: banUser
      responses:
        '200':
          description: OK
      tags:
        - group
  '/group/{groupId}/allow/{userId}':
    parameters:
      - schema:
          type: string
        name: groupId
        in: path
        required: true
      - schema:
          type: string
        name: userId
        in: path
        required: true
    post:
      summary: ''
      operationId: allowUser
      responses:
        '200':
          description: OK
      tags:
        - group
      description: ''
  /user/profile/info:
    get:
      summary: Your GET endpoint
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileInfoResponse'
      operationId: getProfileInfo
  /path/area:
    post:
      summary: ''
      operationId: findAllAvailableByArea
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PathResponse'
      description: ''
      tags:
        - path
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindPathsInAreaRequest'
components:
  parameters:
    page:
      name: page
      in: query
      schema:
        type: integer
    size:
      name: size
      in: query
      schema:
        type: integer
  schemas:
    LoginRequest:
      title: LoginRequest
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        clientId:
          type: string
        redirectUri:
          type: string
    LoginResponse:
      title: LoginResponse
      type: object
      properties:
        code:
          type: string
        redirectUri:
          type: string
      required:
        - code
        - redirectUri
    PathRequest:
      title: PathRequest
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        path:
          $ref: '#/components/schemas/GeoFeatureDto'
    ErrorResponse:
      title: ErrorResponse
      type: object
      properties:
        cause:
          type: string
        message:
          type: string
      required:
        - cause
    PathResponse:
      title: PathResponse
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        path:
          $ref: '#/components/schemas/GeoFeatureDto'
        audit:
          $ref: '#/components/schemas/AuditDto'
        images:
          type: array
          items:
            $ref: '#/components/schemas/ResourceItemResponse'
        isEditable:
          type: boolean
        visibility:
          type: number
      required:
        - id
        - name
        - description
        - path
        - audit
        - images
        - isEditable
    AuditDto:
      title: AuditDto
      type: object
      properties:
        createdBy:
          type: string
        createdAt:
          type: string
        modifiedBy:
          type: string
        modifiedAt:
          type: string
    TokenResponse:
      title: TokenResponse
      type: object
      properties:
        accessToken:
          type: string
        accessTokenExpiration:
          type: string
        refreshToken:
          type: string
        refreshTokenExpiration:
          type: string
      required:
        - accessToken
        - accessTokenExpiration
        - refreshToken
        - refreshTokenExpiration
    RegistrationRequest:
      title: RegistrationRequest
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    RegistrationResponse:
      title: RegistrationResponse
      type: object
      properties:
        userId:
          type: string
      required:
        - userId
    GeoFeatureDto:
      title: LineStringDto
      type: object
      properties:
        type:
          type: string
        coordinates:
          type: array
          items:
            type: array
            items:
              type: number
      required:
        - type
        - coordinates
    GroupRequest:
      title: UpdateGroupRequest
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        joinPolicy:
          type: number
    GroupResponse:
      title: GroupResponse
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        joinPolicy:
          type: number
        owner:
          type: string
        isEditable:
          type: boolean
        audit:
          $ref: '#/components/schemas/AuditDto'
        isMember:
          type: boolean
      required:
        - id
        - name
        - description
        - joinPolicy
        - owner
        - isEditable
        - audit
        - isMember
    GroupPageResponse:
      title: GroupPageResponse
      type: object
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/GroupResponse'
    PageResponse:
      title: PageResponse
      type: object
      properties:
        page:
          type: number
        size:
          type: number
        items:
          type: array
          items: {}
        total:
          type: number
      required:
        - page
        - size
        - items
        - total
    CreatedRespone:
      title: CreatedRespone
      type: object
      properties:
        id:
          type: string
      required:
        - id
    ResourceItemResponse:
      title: ResourceItemResponse
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        url:
          type: string
      required:
        - id
        - name
        - url
    LogoutRequest:
      title: LogoutRequest
      type: object
      properties:
        accessToken:
          type: string
    PathPageResponse:
      title: GroupPageResponse
      type: object
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/PathResponse'
    GroupMemberResponse:
      title: GroupMemberResponse
      type: object
      properties:
        id:
          type: string
        email:
          type: string
    GroupMemberPageResponse:
      title: GroupMemberPageResponse
      type: object
      allOf:
        - $ref: '#/components/schemas/PageResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/GroupMemberResponse'
    ProfileInfoResponse:
      title: ProfileInfoResponse
      type: object
      properties:
        id:
          type: string
        email:
          type: string
    FindPathsInAreaRequest:
      title: FindPathsInAreaRequest
      type: object
      properties:
        feature:
          $ref: '#/components/schemas/GeoFeatureDto'
